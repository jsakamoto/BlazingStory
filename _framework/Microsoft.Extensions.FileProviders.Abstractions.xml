<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.FileProviders.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.FileProviders.IDirectoryContents">
            <summary>
            Represents a directory's content in the file provider.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists">
            <summary>
            True if a directory was located at the given path.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.IFileInfo">
            <summary>
            Represents a file in the given file provider.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists">
            <summary>
            Gets a value that indicates if the resource exists in the underlying storage system.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.Length">
            <summary>
            Gets the length of the file in bytes, or -1 for a directory or nonexistent file.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath">
            <summary>
            Gets the path to the file, including the file name. Returns <see langword="null"/> if the file is not directly accessible.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.Name">
            <summary>
            Gets the name of the file or directory, not including any path.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.LastModified">
            <summary>
            Gets the time when the file was last modified.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory">
            <summary>
            Gets a value that indicates whether <c>TryGetDirectoryContents</c> has enumerated a subdirectory.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream">
            <summary>
            Returns file contents as a read-only stream.
            </summary>
            <returns>The file stream.</returns>
            <remarks>The caller should dispose the stream when complete.</remarks>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.IFileProvider">
            <summary>
            A read-only file provider abstraction.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)">
            <summary>
            Locate a file at the given path.
            </summary>
            <param name="subpath">Relative path that identifies the file.</param>
            <returns>The file information. Caller must check Exists property.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            </summary>
            <param name="subpath">The relative path that identifies the directory.</param>
            <returns>The contents of the directory.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> for the specified <paramref name="filter"/>.
            </summary>
            <param name="filter">Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> that is notified when a file matching <paramref name="filter"/> is added, modified or deleted.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents">
            <summary>
            Represents a nonexistent directory.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Singleton">
            <summary>
            Gets a shared instance of <see cref="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists">
            <summary>
            Gets a value that's always <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator to an empty collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NotFoundFileInfo">
            <summary>
            Represents a nonexistent file.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundFileInfo.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.NotFoundFileInfo"/>.
            </summary>
            <param name="name">The name of the file that could not be found.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.Exists">
            <summary>
            Gets a value that's always <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.IsDirectory">
            <summary>
            Gets a value that's always <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.LastModified">
            <summary>
            Gets <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.Length">
            <summary>
            Gets a value that's always -1.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.PhysicalPath">
            <summary>
            Gets a value that's always <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundFileInfo.CreateReadStream">
            <summary>
            Always throws. A stream cannot be created for a nonexistent file.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">In all cases.</exception>
            <returns>Does not return.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NullChangeToken">
            <summary>
            An empty change token that doesn't raise any change callbacks.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NullChangeToken.Singleton">
            <summary>
            Gets a singleton instance of <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NullChangeToken.HasChanged">
            <summary>
            Gets a value that's always <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NullChangeToken.ActiveChangeCallbacks">
            <summary>
            Gets a value that's always <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Always returns an empty disposable object. Callbacks will never be called.
            </summary>
            <param name="callback">This parameter is ignored.</param>
            <param name="state">This parameter is ignored.</param>
            <returns>A disposable object that no-ops on dispose.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NullFileProvider">
            <summary>
            An empty file provider with no contents.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerates a nonexistent directory.
            </summary>
            <param name="subpath">A path under the root directory. This parameter is ignored.</param>
            <returns>A <see cref="T:Microsoft.Extensions.FileProviders.IDirectoryContents"/> that does not exist and does not contain any contents.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo(System.String)">
            <summary>
            Locates a nonexistent file.
            </summary>
            <param name="subpath">A path under the root directory.</param>
            <returns>A <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> representing a nonexistent file at the given path.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullFileProvider.Watch(System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> that monitors nothing.
            </summary>
            <param name="filter">Filter string used to determine what files or folders to monitor. This parameter is ignored.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> that does not register callbacks.</returns>
        </member>
        <member name="P:System.SR.FileNotExists">
            <summary>The file {0} does not exist.</summary>
        </member>
    </members>
</doc>
