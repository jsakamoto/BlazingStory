<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Components</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Components.BindConverter">
            <summary>
            Performs conversions during binding.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Boolean},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Int32},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Int64,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Int64},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Int16,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Int16},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Single,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Single},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Double,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Double},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> for inclusion in an attribute.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Decimal},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTime,System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTime},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTime},System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTimeOffset,System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTimeOffset},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTimeOffset},System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateOnly,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateOnly,System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateOnly.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateOnly},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateOnly},System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateOnly.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.TimeOnly,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.TimeOnly,System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateOnly.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.TimeOnly},System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.TimeOnly},System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="format">The format to use. Provided to <see cref="M:System.DateOnly.ToString(System.String,System.IFormatProvider)"/>.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.FormatValue``1(``0,System.Globalization.CultureInfo)">
            <summary>
            Formats the provided <paramref name="value"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to format.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use while formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToString(System.Object,System.Globalization.CultureInfo,System.String@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.String"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToBool(System.Object,System.Globalization.CultureInfo,System.Boolean@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableBool(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Boolean}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Boolean"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToInt(System.Object,System.Globalization.CultureInfo,System.Int32@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableInt(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Int32}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Int32"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToLong(System.Object,System.Globalization.CultureInfo,System.Int64@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableLong(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Int64}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Int64"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToShort(System.Object,System.Globalization.CultureInfo,System.Int16@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableShort(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Int16}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Int16"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToFloat(System.Object,System.Globalization.CultureInfo,System.Single@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Single"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableFloat(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Single}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Single"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDouble(System.Object,System.Globalization.CultureInfo,System.Double@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Double"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDouble(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Double}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Double"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDecimal(System.Object,System.Globalization.CultureInfo,System.Decimal@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDecimal(System.Object,System.Globalization.CultureInfo,System.Nullable{System.Decimal}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.Decimal"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTime(System.Object,System.Globalization.CultureInfo,System.DateTime@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTime(System.Object,System.Globalization.CultureInfo,System.String,System.DateTime@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDateTime(System.Object,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.DateTime"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDateTime(System.Object,System.Globalization.CultureInfo,System.String,System.Nullable{System.DateTime}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.DateTime"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTimeOffset(System.Object,System.Globalization.CultureInfo,System.DateTimeOffset@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTimeOffset(System.Object,System.Globalization.CultureInfo,System.String,System.DateTimeOffset@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDateTimeOffset(System.Object,System.Globalization.CultureInfo,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDateTimeOffset(System.Object,System.Globalization.CultureInfo,System.String,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateOnly(System.Object,System.Globalization.CultureInfo,System.DateOnly@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.DateOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateOnly(System.Object,System.Globalization.CultureInfo,System.String,System.DateOnly@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.DateOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDateOnly(System.Object,System.Globalization.CultureInfo,System.Nullable{System.DateOnly}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.DateOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableDateOnly(System.Object,System.Globalization.CultureInfo,System.String,System.Nullable{System.DateOnly}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.DateOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToTimeOnly(System.Object,System.Globalization.CultureInfo,System.TimeOnly@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.TimeOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToTimeOnly(System.Object,System.Globalization.CultureInfo,System.String,System.TimeOnly@)">
            <summary>
            Attempts to convert a value to a <see cref="T:System.TimeOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableTimeOnly(System.Object,System.Globalization.CultureInfo,System.Nullable{System.TimeOnly}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.TimeOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToNullableTimeOnly(System.Object,System.Globalization.CultureInfo,System.String,System.Nullable{System.TimeOnly}@)">
            <summary>
            Attempts to convert a value to a nullable <see cref="T:System.TimeOnly"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="format">The format string to use in conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindConverter.TryConvertTo``1(System.Object,System.Globalization.CultureInfo,``0@)">
            <summary>
            Attempts to convert a value to a value of type <typeparamref name="T"/>.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for conversion.</param>
            <param name="value">The converted value.</param>
            <returns><c>true</c> if conversion is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.BindElementAttribute">
            <summary>
            Configures options for binding specific element types.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.BindElementAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.BindElementAttribute"/>.
            </summary>
            <param name="element">The tag name of the element.</param>
            <param name="suffix">The suffix value. For example, set this to <c>value</c> for <c>bind-value</c>, or set this to <see langword="null" /> for <c>bind</c>.</param>
            <param name="valueAttribute">The name of the value attribute to be bound.</param>
            <param name="changeAttribute">The name of an attribute that will register an associated change event.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.Element">
            <summary>
            Gets the tag name of the element.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.Suffix">
            <summary>
            Gets the suffix value.
            For example, this will be <c>value</c> to mean <c>bind-value</c>, or <see langword="null" /> to mean <c>bind</c>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.ValueAttribute">
            <summary>
            Gets the name of the value attribute to be bound.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.BindElementAttribute.ChangeAttribute">
            <summary>
            Gets the name of an attribute that will register an associated change event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute">
            <summary>
            Denotes the target member as a cascading component parameter. Its value will be
            supplied by the closest ancestor <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> component that
            supplies values with a compatible type and name.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingParameterAttribute.Name">
             <summary>
             If specified, the parameter value will be supplied by the closest
             ancestor <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> that supplies a value with
             this name.
            
             If null, the parameter value will be supplied by the closest ancestor
             <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/>  that supplies a value with a compatible
             type.
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingParameterAttributeBase">
            <summary>
            Represents a parameter whose value cascades down the component hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingParameterAttributeBase.SingleDelivery">
            <summary>
            Gets a flag indicating whether the cascading parameter should
            be supplied only once per component.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingParameterInfo">
            <summary>
            Contains information about a cascading parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingParameterInfo.Attribute">
            <summary>
            Gets the property's <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttributeBase"/> attribute.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingParameterInfo.PropertyName">
            <summary>
            Gets the name of the parameter's property.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingParameterInfo.PropertyType">
            <summary>
            Gets the type of the parameter's property.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute">
            <summary>
            Denotes the generic type parameter as cascading. This allows generic type inference
            to use this type parameter value automatically on descendants that also have a type
            parameter with the same name.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute"/>.
            </summary>
            <param name="name">The name of the type parameter.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute.Name">
            <summary>
            Gets the name of the type parameter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingValue`1">
            <summary>
            A component that provides a cascading value to all descendant components.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent">
            <summary>
            The content to which the value should be provided.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.Value">
            <summary>
            The value to be provided.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.Name">
             <summary>
             Optionally gives a name to the provided value. Descendant components
             will be able to receive the value by specifying this name.
            
             If no name is specified, then descendant components will receive the
             value based the type of value they are requesting.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed">
            <summary>
            If true, indicates that <see cref="P:Microsoft.AspNetCore.Components.CascadingValue`1.Value"/> will not change. This is a
            performance optimization that allows the framework to skip setting up
            change notifications. Set this flag only if you will not change
            <see cref="P:Microsoft.AspNetCore.Components.CascadingValue`1.Value"/> during the component's lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValue`1.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValue`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CascadingValueSource`1">
            <summary>
            Supplies a cascading value that can be received by components using
            <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/>.
            </summary>
            <param name="value">The initial value.</param>
            <param name="isFixed">A flag to indicate whether the value is fixed. If false, all receipients will subscribe for update notifications, which you can issue by calling <see cref="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.NotifyChangedAsync"/>. These subscriptions come at a performance cost, so if the value will not change, set <paramref name="isFixed"/> to true.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/>.
            </summary>
            <param name="name">A name for the cascading value. If set, <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute"/> can be configured to match based on this name.</param>
            <param name="value">The initial value.</param>
            <param name="isFixed">A flag to indicate whether the value is fixed. If false, all receipients will subscribe for update notifications, which you can issue by calling <see cref="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.NotifyChangedAsync"/>. These subscriptions come at a performance cost, so if the value will not change, set <paramref name="isFixed"/> to true.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/>.
            </summary>
            <param name="initialValueFactory">A callback that produces the initial value when first required.</param>
            <param name="isFixed">A flag to indicate whether the value is fixed. If false, all receipients will subscribe for update notifications, which you can issue by calling <see cref="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.NotifyChangedAsync"/>. These subscriptions come at a performance cost, so if the value will not change, set <paramref name="isFixed"/> to true.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.#ctor(System.String,System.Func{`0},System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/>.
            </summary>
            <param name="name">A name for the cascading value. If set, <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute"/> can be configured to match based on this name.</param>
            <param name="initialValueFactory">A callback that produces the initial value when first required.</param>
            <param name="isFixed">A flag to indicate whether the value is fixed. If false, all receipients will subscribe for update notifications, which you can issue by calling <see cref="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.NotifyChangedAsync"/>. These subscriptions come at a performance cost, so if the value will not change, set <paramref name="isFixed"/> to true.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.NotifyChangedAsync">
            <summary>
            Notifies subscribers that the value has changed (for example, if it has been mutated).
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the notifications have been issued.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CascadingValueSource`1.NotifyChangedAsync(`0)">
            <summary>
            Notifies subscribers that the value has changed, supplying a new value.
            </summary>
            <param name="newValue"></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the notifications have been issued.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ChangeEventArgs">
            <summary>
            Supplies information about an change event that is being raised.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ChangeEventArgs.Value">
            <summary>
            Gets or sets the new value.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers">
            <summary>
            Used by generated code produced by the Components code generator. Not intended or supported
            for use in application code.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck``1(``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback``1(System.Object,System.Action{``0},``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback``1(System.Object,System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback``1(System.Object,Microsoft.AspNetCore.Components.EventCallback{``0},``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredBindSetter``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredBindSetter``1(System.Action{``0},``0)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.InvokeSynchronousDelegate(System.Action)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.InvokeAsynchronousDelegate(System.Action)">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.InvokeAsynchronousDelegate(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Not intended for use by application code.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ComponentBase">
            <summary>
            Optional base class for components. Alternatively, components may
            implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> directly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ComponentBase.RendererInfo">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.RendererInfo"/> the component is running on.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ComponentBase.Assets">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.ResourceAssetCollection"/> for the application.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> assigned to this component.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <summary>
            Renders the component to the supplied <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/>.
            </summary>
            <param name="builder">A <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/> that will receive the render output.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnInitialized">
            <summary>
            Method invoked when the component is ready to start, having received its
            initial parameters from its parent in the render tree.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync">
             <summary>
             Method invoked when the component is ready to start, having received its
             initial parameters from its parent in the render tree.
            
             Override this method if you will perform an asynchronous operation and
             want the component to refresh when that operation is completed.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet">
            <summary>
            Method invoked when the component has received parameters from its parent in
            the render tree, and the incoming values have been assigned to properties.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in
            the render tree, and the incoming values have been assigned to properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged">
            <summary>
            Notifies the component that its state has changed. When applicable, this will
            cause the component to be re-rendered.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.ShouldRender">
            <summary>
            Returns a flag to indicate whether the component should render.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)">
             <summary>
             Method invoked after each time the component has rendered interactively and the UI has finished
             updating (for example, after elements have been added to the browser DOM). Any <see cref="T:Microsoft.AspNetCore.Components.ElementReference" />
             fields will be populated by the time this runs.
            
             This method is not invoked during prerendering or server-side rendering, because those processes
             are not attached to any live browser DOM and are already complete before the DOM is updated.
             </summary>
             <param name="firstRender">
             Set to <c>true</c> if this is the first time <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)"/> has been invoked
             on this component instance; otherwise <c>false</c>.
             </param>
             <remarks>
             The <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)"/> and <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)"/> lifecycle methods
             are useful for performing interop, or interacting with values received from <c>@ref</c>.
             Use the <paramref name="firstRender"/> parameter to ensure that initialization work is only performed
             once.
             </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)">
             <summary>
             Method invoked after each time the component has been rendered interactively and the UI has finished
             updating (for example, after elements have been added to the browser DOM). Any <see cref="T:Microsoft.AspNetCore.Components.ElementReference" />
             fields will be populated by the time this runs.
            
             This method is not invoked during prerendering or server-side rendering, because those processes
             are not attached to any live browser DOM and are already complete before the DOM is updated.
            
             Note that the component does not automatically re-render after the completion of any returned <see cref="T:System.Threading.Tasks.Task"/>,
             because that would cause an infinite render loop.
             </summary>
             <param name="firstRender">
             Set to <c>true</c> if this is the first time <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)"/> has been invoked
             on this component instance; otherwise <c>false</c>.
             </param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
             <remarks>
             The <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)"/> and <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)"/> lifecycle methods
             are useful for performing interop, or interacting with values received from <c>@ref</c>.
             Use the <paramref name="firstRender"/> parameter to ensure that initialization work is only performed
             once.
             </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action)">
            <summary>
            Executes the supplied work item on the associated renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the supplied work item on the associated renderer's
            synchronization context.
            </summary>
            <param name="workItem">The work item to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.DispatchExceptionAsync(System.Exception)">
             <summary>
             Treats the supplied <paramref name="exception"/> as being thrown by this component. This will cause the
             enclosing ErrorBoundary to transition into a failed state. If there is no enclosing ErrorBoundary,
             it will be regarded as an exception from the enclosing renderer.
            
             This is useful if an exception occurs outside the component lifecycle methods, but you wish to treat it
             the same as an exception from a component lifecycle method.
             </summary>
             <param name="exception">The <see cref="T:System.Exception"/> that will be dispatched to the renderer.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when the exception has finished dispatching.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Sets parameters supplied by the component's parent in the render tree.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the component has finished updating and rendering itself.</returns>
            <remarks>
            <para>
            Parameters are passed when <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)"/> is called. It is not required that
            the caller supply a parameter value for all of the parameters that are logically understood by the component.
            </para>
            <para>
            The default implementation of <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)"/> will set the value of each property
            decorated with <see cref="T:Microsoft.AspNetCore.Components.ParameterAttribute" /> or <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute" /> that has
            a corresponding value in the <see cref="T:Microsoft.AspNetCore.Components.ParameterView" />. Parameters that do not have a corresponding value
            will be unchanged.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.DefaultComponentActivator.CreateInstance(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Dispatcher">
            <summary>
            Dispatches external actions to be executed on the context of a <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.CreateDefault">
            <summary>
            Creates a default instance of <see cref="T:Microsoft.AspNetCore.Components.Dispatcher"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.Dispatcher"/> instance.</returns>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.Dispatcher.UnhandledException">
            <summary>
            Provides notifications of unhandled exceptions that occur within the dispatcher.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Dispatcher.SectionRegistry">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionRegistry"/> associated with the dispatcher.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.AssertAccess">
            <summary>
            Validates that the currently executing code is running inside the dispatcher.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.CheckAccess">
            <summary>
            Returns a value that determines whether using the dispatcher to invoke a work item is required
            from the current context.
            </summary>
            <returns><c>true</c> if invoking is required, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync(System.Action)">
            <summary>
            Invokes the given <see cref="T:System.Action"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="workItem">The action to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when the action has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes the given <see cref="T:System.Func`1"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="workItem">The asynchronous action to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when the action has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync``1(System.Func{``0})">
            <summary>
            Invokes the given <see cref="T:System.Func`1"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="workItem">The function to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that will be completed when the function has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes the given <see cref="T:System.Func`1"/> in the context of the associated <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="workItem">The asynchronous function to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that will be completed when the function has finished executing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Dispatcher.OnUnhandledException(System.UnhandledExceptionEventArgs)">
            <summary>
            Called to notify listeners of an unhandled exception.
            </summary>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/>.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.DynamicComponent">
            <summary>
            A component that renders another component dynamically according to its
            <see cref="P:Microsoft.AspNetCore.Components.DynamicComponent.Type" /> parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.DynamicComponent.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.DynamicComponent"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DynamicComponent.Type">
            <summary>
            Gets or sets the type of the component to be rendered. The supplied type must
            implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters">
            <summary>
            Gets or sets a dictionary of parameters to be passed to the component.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.DynamicComponent.Instance">
            <summary>
            Gets rendered component instance.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.DynamicComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.DynamicComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EditorRequiredAttribute">
            <summary>
            Specifies that the component parameter is required to be provided by the user when authoring it in the editor.
            <para>
            If a value for this parameter is not provided, editors or build tools may provide warnings indicating the user to
            specify a value. This attribute is only valid on properties marked with <see cref="T:Microsoft.AspNetCore.Components.ParameterAttribute"/>.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ElementReference">
            <summary>
            Represents a reference to a rendered element.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ElementReference.Id">
            <summary>
            Gets a unique identifier for <see cref="T:Microsoft.AspNetCore.Components.ElementReference" />.
            </summary>
            <remarks>
            The Id is unique at least within the scope of a given user/circuit.
            This property is public to support Json serialization and should not be used by user code.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ElementReference.Context">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.ElementReferenceContext"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ElementReference.#ctor(System.String,Microsoft.AspNetCore.Components.ElementReferenceContext)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.Components.ElementReference" />.
            </summary>
            <param name="id">A unique identifier for this <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/>.</param>
            <param name="context">The nullable <see cref="T:Microsoft.AspNetCore.Components.ElementReferenceContext"/> instance.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ElementReference.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/>.
            </summary>
            <param name="id">A unique identifier for this <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/>.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ElementReferenceContext">
            <summary>
            Context for an <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ErrorBoundaryBase">
            <summary>
            A base class for error boundary components.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent">
            <summary>
            The content to be displayed when there is no error.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent">
            <summary>
            The content to be displayed when there is an error.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount">
            <summary>
            The maximum number of errors that can be handled. If more errors are received,
            they will be treated as fatal. Calling <see cref="M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover"/> resets the count.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.CurrentException">
            <summary>
            Gets the current exception, or null if there is no exception.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover">
            <summary>
            Resets the error boundary to a non-errored state. If the error boundary is not
            already in an errored state, the call has no effect.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.OnErrorAsync(System.Exception)">
            <summary>
            Invoked by the base class when an error is being handled. Typically, derived classes
            should log the exception from this method.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> being handled.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallback">
            <summary>
            A bound event handler delegate.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallback.Factory">
            <summary>
            Gets a reference to the <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallback.Empty">
            <summary>
            Gets an empty <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.#ctor(Microsoft.AspNetCore.Components.IHandleEvent,System.MulticastDelegate)">
            <summary>
            Creates the new <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="delegate">The delegate to bind.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventCallback.HasDelegate">
            <summary>
            Gets a value that indicates whether the delegate associated with this event dispatcher is non-null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.InvokeAsync(System.Object)">
            <summary>
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            </summary>
            <param name="arg">The argument.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes asynchronously once event processing has completed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.InvokeAsync">
            <summary>
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes asynchronously once event processing has completed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackFactory">
            <summary>
            A factory for creating <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> and <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>
            instances.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Action)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Action{System.Object})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,Microsoft.AspNetCore.Components.EventCallback{``0})">
            <summary>
            Returns the provided <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Action)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Action{``0})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.CreateInferred``1(System.Object,System.Action{``0},``0)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactory.CreateInferred``1(System.Object,System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>. For internal framework use only.
            </summary>
            <param name="receiver"></param>
            <param name="callback"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions">
            <summary>
            Contains extension methods for two-way binding using <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>. For internal use only.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.String},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.String,System.Threading.Tasks.Task},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Boolean},System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Boolean,System.Threading.Tasks.Task},System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Boolean}},System.Nullable{System.Boolean},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Boolean},System.Threading.Tasks.Task},System.Nullable{System.Boolean},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int32},System.Int32,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Int32}},System.Nullable{System.Int32},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Nullable{System.Int32},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int64},System.Int64,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Int64,System.Threading.Tasks.Task},System.Int64,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int16},System.Int16,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Int16,System.Threading.Tasks.Task},System.Int16,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Int64}},System.Nullable{System.Int64},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Int64},System.Threading.Tasks.Task},System.Nullable{System.Int64},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Int16}},System.Nullable{System.Int16},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Int16},System.Threading.Tasks.Task},System.Nullable{System.Int16},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Single},System.Single,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Single,System.Threading.Tasks.Task},System.Single,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Single}},System.Nullable{System.Single},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Single},System.Threading.Tasks.Task},System.Nullable{System.Single},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Double},System.Double,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Double,System.Threading.Tasks.Task},System.Double,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Double}},System.Nullable{System.Double},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Double},System.Threading.Tasks.Task},System.Nullable{System.Double},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Decimal},System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Decimal,System.Threading.Tasks.Task},System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.Decimal}},System.Nullable{System.Decimal},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.Decimal},System.Threading.Tasks.Task},System.Nullable{System.Decimal},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTime},System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.DateTime,System.Threading.Tasks.Task},System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTime},System.DateTime,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.DateTime,System.Threading.Tasks.Task},System.DateTime,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.DateTime}},System.Nullable{System.DateTime},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.DateTime},System.Threading.Tasks.Task},System.Nullable{System.DateTime},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.DateTime}},System.Nullable{System.DateTime},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.DateTime},System.Threading.Tasks.Task},System.Nullable{System.DateTime},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTimeOffset},System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.DateTimeOffset,System.Threading.Tasks.Task},System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTimeOffset},System.DateTimeOffset,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.DateTimeOffset,System.Threading.Tasks.Task},System.DateTimeOffset,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.DateTimeOffset}},System.Nullable{System.DateTimeOffset},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.DateTimeOffset},System.Threading.Tasks.Task},System.Nullable{System.DateTimeOffset},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.DateTimeOffset}},System.Nullable{System.DateTimeOffset},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.DateTimeOffset},System.Threading.Tasks.Task},System.Nullable{System.DateTimeOffset},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateOnly},System.DateOnly,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.DateOnly,System.Threading.Tasks.Task},System.DateOnly,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateOnly},System.DateOnly,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.DateOnly,System.Threading.Tasks.Task},System.DateOnly,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.DateOnly}},System.Nullable{System.DateOnly},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.DateOnly},System.Threading.Tasks.Task},System.Nullable{System.DateOnly},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.DateOnly}},System.Nullable{System.DateOnly},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.DateOnly},System.Threading.Tasks.Task},System.Nullable{System.DateOnly},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.TimeOnly},System.TimeOnly,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.TimeOnly,System.Threading.Tasks.Task},System.TimeOnly,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.TimeOnly},System.TimeOnly,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.TimeOnly,System.Threading.Tasks.Task},System.TimeOnly,System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.TimeOnly}},System.Nullable{System.TimeOnly},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.TimeOnly},System.Threading.Tasks.Task},System.Nullable{System.TimeOnly},System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Nullable{System.TimeOnly}},System.Nullable{System.TimeOnly},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.Nullable{System.TimeOnly},System.Threading.Tasks.Task},System.Nullable{System.TimeOnly},System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder``1(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{``0},``0,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder``1(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{``0,System.Threading.Tasks.Task},``0,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <param name="receiver"></param>
            <param name="setter"></param>
            <param name="existingValue"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/> and <see cref="T:System.EventArgs"/> types.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.EventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.EventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.ChangeEventArgs})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.ChangeEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> for the provided <paramref name="receiver"/> and
            <paramref name="callback"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.</param>
            <param name="receiver">The event receiver.</param>
            <param name="callback">The event callback.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallback`1">
            <summary>
            A bound event handler delegate.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallback`1.Empty">
            <summary>
            Gets an empty <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.#ctor(Microsoft.AspNetCore.Components.IHandleEvent,System.MulticastDelegate)">
            <summary>
            Creates the new <see cref="T:Microsoft.AspNetCore.Components.EventCallback`1"/>.
            </summary>
            <param name="receiver">The event receiver.</param>
            <param name="delegate">The delegate to bind.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventCallback`1.HasDelegate">
            <summary>
            Gets a value that indicates whether the delegate associated with this event dispatcher is non-null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.InvokeAsync(`0)">
            <summary>
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            </summary>
            <param name="arg">The argument.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes asynchronously once event processing has completed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.InvokeAsync">
            <summary>
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes asynchronously once event processing has completed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallback`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem">
            <summary>
            Wraps a callback delegate associated with an event.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.EventCallbackWorkItem.Empty">
            <summary>
            An empty <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackWorkItem.#ctor(System.MulticastDelegate)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/> with the provided <paramref name="delegate"/>.
            </summary>
            <param name="delegate">The callback delegate.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventCallbackWorkItem.InvokeAsync(System.Object)">
            <summary>
            Invokes the delegate associated with this <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/>.
            </summary>
            <param name="arg">The argument to provide to the delegate. May be <c>null</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> then will complete asynchronously once the delegate has completed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.EventHandlerAttribute">
            <summary>
            Associates an event argument type with an event attribute name.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventHandlerAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.EventHandlerAttribute"/>.
            </summary>
            <param name="attributeName"></param>
            <param name="eventArgsType"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.EventHandlerAttribute.#ctor(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.EventHandlerAttribute"/>.
            </summary>
            <param name="attributeName"></param>
            <param name="eventArgsType"></param>
            <param name="enableStopPropagation"></param>
            <param name="enablePreventDefault"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventHandlerAttribute.AttributeName">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventHandlerAttribute.EventArgsType">
            <summary>
            Gets the event argument type.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventHandlerAttribute.EnableStopPropagation">
            <summary>
            Gets the event's ability to stop propagation.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.EventHandlerAttribute.EnablePreventDefault">
            <summary>
            Gets the event's ability to prevent default event flow.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IComponent">
            <summary>
            Represents a UI component.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <summary>
            Attaches the component to a <see cref="T:Microsoft.AspNetCore.Components.RenderHandle" />.
            </summary>
            <param name="renderHandle">A <see cref="T:Microsoft.AspNetCore.Components.RenderHandle"/> that allows the component to be rendered.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Sets parameters supplied by the component's parent in the render tree.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the component has finished updating and rendering itself.</returns>
            <remarks>
            The <see cref="M:Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)"/> method should be passed the entire set of parameter values each
            time <see cref="M:Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)"/> is called. It not required that the caller supply a parameter
            value for all parameters that are logically understood by the component.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IComponentActivator">
            <summary>
            Represents an activator that can be used to instantiate components.
            The activator is not responsible for dependency injection, since the framework
            performs dependency injection to the resulting instances separately.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IComponentActivator.CreateInstance(System.Type)">
            <summary>
            Creates a component of the specified type.
            </summary>
            <param name="componentType">The type of component to create.</param>
            <returns>A reference to the newly created component.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IComponentRenderMode">
            <summary>
            Represents a render mode for a component.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IHandleAfterRender">
            <summary>
            Interface implemented by components that receive notification that they have been rendered.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync">
            <summary>
            Notifies the component that it has been rendered.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous event handling operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IHandleEvent">
            <summary>
            Interface implemented by components that receive notification of state changes.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem,System.Object)">
            <summary>
            Notifies the a state change has been triggered.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AspNetCore.Components.EventCallbackWorkItem"/> associated with this event.</param>
            <param name="arg">The argument associated with this event.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes once the component has processed the state change.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager">
            <summary>
            Manages the persistent state of components in an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.State">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/> associated with the <see cref="T:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.RestoreStateAsync(Microsoft.AspNetCore.Components.IPersistentComponentStateStore)">
            <summary>
            Restores the component application state from the given <see cref="T:Microsoft.AspNetCore.Components.IPersistentComponentStateStore"/>.
            </summary>
            <param name="store">The <see cref="T:Microsoft.AspNetCore.Components.IPersistentComponentStateStore"/> to restore the application state from.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will complete when the state has been restored.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.PersistStateAsync(Microsoft.AspNetCore.Components.IPersistentComponentStateStore,Microsoft.AspNetCore.Components.RenderTree.Renderer)">
            <summary>
            Persists the component application state into the given <see cref="T:Microsoft.AspNetCore.Components.IPersistentComponentStateStore"/>.
            </summary>
            <param name="store">The <see cref="T:Microsoft.AspNetCore.Components.IPersistentComponentStateStore"/> to restore the application state from.</param>
            <param name="renderer">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/> that components are being rendered.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will complete when the state has been restored.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.InjectAttribute">
            <summary>
            Indicates that the associated property should have a value injected from the
            service provider during initialization.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.InjectAttribute.Key">
            <summary>
            Gets or sets the object that specifies the key of the service to inject.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.IPersistentComponentStateStore">
            <summary>
            Manages the storage for components and services that are part of a Blazor application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IPersistentComponentStateStore.GetPersistedStateAsync">
            <summary>
            Gets the persisted state from the store.
            </summary>
            <returns>The persisted state.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IPersistentComponentStateStore.PersistStateAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Byte[]})">
            <summary>
            Persists the serialized state into the storage.
            </summary>
            <param name="state">The serialized state to persist.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the state is persisted to disk.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.IPersistentComponentStateStore.SupportsRenderMode(Microsoft.AspNetCore.Components.IComponentRenderMode)">
            <summary>
            Returns a value that indicates whether the store supports the given <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/>.
            </summary>
            <param name="renderMode">The <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> in question.</param>
            <returns><c>true</c> if the render mode is supported by the store, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.LayoutAttribute">
            <summary>
            Indicates that the associated component type uses a specified layout.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.LayoutAttribute.#ctor(System.Type)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.LayoutAttribute"/>.
            </summary>
            <param name="layoutType">The type of the layout.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.LayoutAttribute.LayoutType">
            <summary>
            The type of the layout. The type must implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            and must accept a parameter with the name 'Body'.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.LayoutComponentBase">
            <summary>
            Optional base class for components that represent a layout.
            Alternatively, components may implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> directly
            and declare their own parameter named <see cref="P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body">
            <summary>
            Gets the content to be rendered inside the layout.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.LayoutComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.LayoutView">
            <summary>
            Displays the specified content inside the specified layout and any further
            nested layouts.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.LayoutView.ChildContent">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.LayoutView.Layout">
            <summary>
            Gets or sets the type of the layout in which to display the content.
            The type must implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> and accept a parameter named <see cref="P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.LayoutView.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.LayoutView.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.LocationChangeException">
            <summary>
            An exception thrown when <see cref="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged"/> throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.LocationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Components.LocationChangeException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.MarkupString">
            <summary>
            A string value that can be rendered as markup such as HTML.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.MarkupString.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/>.
            </summary>
            <param name="value">The value for the new instance.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.MarkupString.Value">
            <summary>
            Gets the value of the <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.MarkupString.op_Explicit(System.String)~Microsoft.AspNetCore.Components.MarkupString">
            <summary>
            Casts a <see cref="T:System.String"/> to a <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.MarkupString.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.NavigationException">
            <summary>
            Exception thrown when an <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/> is not able to navigate to a different url.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Microsoft.AspNetCore.Components.NavigationException"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationException.Location">
            <summary>
            Gets the uri to which navigation was attempted.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.NavigationManager">
            <summary>
            Provides an abstraction for querying and managing URI navigation.
            </summary>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged">
            <summary>
            An event that fires when the navigation location has changed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri">
            <summary>
            Gets or sets the current base URI. The <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri" /> is always represented as an absolute URI in string form with trailing slash.
            Typically this corresponds to the 'href' attribute on the document's &lt;base&gt; element.
            </summary>
            <remarks>
            Setting <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri" /> will not trigger the <see cref="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged" /> event.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationManager.Uri">
            <summary>
            Gets or sets the current URI. The <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri" /> is always represented as an absolute URI in string form.
            </summary>
            <remarks>
            Setting <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri" /> will not trigger the <see cref="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged" /> event.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationManager.HistoryEntryState">
            <summary>
            Gets or sets the state associated with the current navigation.
            </summary>
            <remarks>
            Setting <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.HistoryEntryState" /> will not trigger the <see cref="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged" /> event.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,System.Boolean)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri"/>).</param>
            <param name="forceLoad">If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri"/>).</param>
            <param name="forceLoad">If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.</param>
            <param name="replace">If true, replaces the current entry in the history stack. If false, appends the new entry to the history stack.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,Microsoft.AspNetCore.Components.NavigationOptions)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri"/>).</param>
            <param name="options">Provides additional <see cref="T:Microsoft.AspNetCore.Components.NavigationOptions"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NavigateToCore(System.String,System.Boolean)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri"/>).</param>
            <param name="forceLoad">If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NavigateToCore(System.String,Microsoft.AspNetCore.Components.NavigationOptions)">
            <summary>
            Navigates to the specified URI.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI
            (as returned by <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri"/>).</param>
            <param name="options">Provides additional <see cref="T:Microsoft.AspNetCore.Components.NavigationOptions"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.Refresh(System.Boolean)">
            <summary>
            Refreshes the current page via request to the server.
            </summary>
            <remarks>
            If <paramref name="forceReload"/> is <c>true</c>, a full page reload will always be performed.
            Otherwise, the response HTML may be merged with the document's existing HTML to preserve client-side state,
            falling back on a full page reload if necessary.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.Initialize(System.String,System.String)">
            <summary>
            Called to initialize BaseURI and current URI before these values are used for the first time.
            Override <see cref="M:Microsoft.AspNetCore.Components.NavigationManager.EnsureInitialized" /> and call this method to dynamically calculate these values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.EnsureInitialized">
            <summary>
            Allows derived classes to lazily self-initialize. Implementations that support lazy-initialization should override
            this method and call <see cref="M:Microsoft.AspNetCore.Components.NavigationManager.Initialize(System.String,System.String)" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.ToAbsoluteUri(System.String)">
            <summary>
            Converts a relative URI into an absolute one (by resolving it
            relative to the current absolute URI).
            </summary>
            <param name="relativeUri">The relative URI.</param>
            <returns>The absolute URI.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.ToBaseRelativePath(System.String)">
            <summary>
            Given a base URI (e.g., one previously returned by <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.BaseUri"/>),
            converts an absolute URI into one relative to the base URI prefix.
            </summary>
            <param name="uri">An absolute URI that is within the space of the base URI.</param>
            <returns>A relative URI path.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NotifyLocationChanged(System.Boolean)">
            <summary>
            Triggers the <see cref="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged"/> event with the current URI value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.NotifyLocationChangingAsync(System.String,System.String,System.Boolean)">
            <summary>
            Notifies the registered handlers of the current location change.
            </summary>
            <param name="uri">The destination URI. This can be absolute, or relative to the base URI.</param>
            <param name="state">The state associated with the target history entry.</param>
            <param name="isNavigationIntercepted">Whether this navigation was intercepted from a link.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the completion of the operation. If the result is <see langword="true"/>, the navigation should continue.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.HandleLocationChangingHandlerException(System.Exception,Microsoft.AspNetCore.Components.Routing.LocationChangingContext)">
            <summary>
            Handles exceptions thrown in location changing handlers.
            </summary>
            <param name="ex">The exception to handle.</param>
            <param name="context">The context passed to the handler.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.SetNavigationLockState(System.Boolean)">
            <summary>
            Sets whether navigation is currently locked. If it is, then implementations should not update <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> and call
            <see cref="M:Microsoft.AspNetCore.Components.NavigationManager.NotifyLocationChanged(System.Boolean)"/> until they have first confirmed the navigation by calling
            <see cref="M:Microsoft.AspNetCore.Components.NavigationManager.NotifyLocationChangingAsync(System.String,System.String,System.Boolean)"/>.
            </summary>
            <param name="value">Whether navigation is currently locked.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManager.RegisterLocationChangingHandler(System.Func{Microsoft.AspNetCore.Components.Routing.LocationChangingContext,System.Threading.Tasks.ValueTask})">
            <summary>
            Registers a handler to process incoming navigation events.
            </summary>
            <param name="locationChangingHandler">The handler to process incoming navigation events.</param>
            <returns>An <see cref="T:System.IDisposable"/> that can be disposed to unregister the location changing handler.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.NavigationManagerExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Boolean)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Boolean})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.DateTime)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.DateTime})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.DateOnly)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.DateOnly})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.TimeOnly)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.TimeOnly})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Decimal)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Decimal})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Double)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Double})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Single)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Single})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Guid)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Guid})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Int32)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Int64)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added or updated.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Int64})">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.String)">
            <summary>
            Returns a URI that is constructed by updating <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with a single parameter
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="name">The name of the parameter to add or update.</param>
            <param name="value">The value of the parameter to add or update.</param>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the parameter will be removed if it exists in the URI.
            Otherwise, it will be added or updated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Returns a URI constructed from <see cref="P:Microsoft.AspNetCore.Components.NavigationManager.Uri"/> with multiple parameters
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="parameters">The values to add, update, or remove.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Returns a URI constructed from <paramref name="uri"/> except with multiple parameters
            added, updated, or removed.
            </summary>
            <param name="navigationManager">The <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/>.</param>
            <param name="uri">The URI with the query to modify.</param>
            <param name="parameters">The values to add, update, or remove.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.NavigationOptions">
            <summary>
            Additional options for navigating to another URI.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationOptions.ForceLoad">
            <summary>
            If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationOptions.ReplaceHistoryEntry">
            <summary>
            If true, replaces the currently entry in the history stack.
            If false, appends the new entry to the history stack.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.NavigationOptions.HistoryEntryState">
            <summary>
            Gets or sets the state to append to the history entry.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.OwningComponentBase">
            <summary>
            A base class that creates a service provider scope.
            </summary>
            <remarks>
            Use the <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase"/> class as a base class to author components that control
            the lifetime of a service provider scope. This is useful when using a transient or scoped service that
            requires disposal such as a repository or database abstraction. Using <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase"/>
            as a base class ensures that the service provider scope is disposed with the component.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.OwningComponentBase.IsDisposed">
            <summary>
            Gets a value determining if the component and associated services have been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.OwningComponentBase.ScopedServices">
            <summary>
            Gets the scoped <see cref="T:System.IServiceProvider"/> that is associated with this component.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.OwningComponentBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.OwningComponentBase`1">
            <summary>
            A base class that creates a service provider scope, and resolves a service of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <remarks>
            Use the <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase`1"/> class as a base class to author components that control
            the lifetime of a service or multiple services. This is useful when using a transient or scoped service that
            requires disposal such as a repository or database abstraction. Using <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase`1"/>
            as a base class ensures that the service and relates services that share its scope are disposed with the component.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.OwningComponentBase`1.Service">
            <summary>
            Gets the <typeparamref name="TService"/> that is associated with this component.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterAttribute">
            <summary>
            Denotes the target member as a component parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterAttribute.CaptureUnmatchedValues">
            <summary>
            Gets or sets a value that determines whether the parameter will capture values that
            don't match any other parameter.
            </summary>
            <remarks>
            <para>
            <see cref="P:Microsoft.AspNetCore.Components.ParameterAttribute.CaptureUnmatchedValues"/> allows a component to accept arbitrary additional
            attributes, and pass them to another component, or some element of the underlying markup.
            </para>
            <para>
            <see cref="P:Microsoft.AspNetCore.Components.ParameterAttribute.CaptureUnmatchedValues"/> can be used on at most one parameter per component.
            </para>
            <para>
            <see cref="P:Microsoft.AspNetCore.Components.ParameterAttribute.CaptureUnmatchedValues"/> should only be applied to parameters of a type that
            can be used with <see cref="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddMultipleAttributes(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"/>
            such as <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterValue">
            <summary>
            Represents a single parameter supplied to an <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            by its parent in the render tree.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterValue.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterValue.Value">
            <summary>
            Gets the value being supplied for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterValue.Cascading">
            <summary>
            Gets a value to indicate whether the parameter is cascading, meaning that it
            was supplied by a <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterView">
            <summary>
            Represents a collection of parameters supplied to an <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            by its parent in the render tree.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterView.Empty">
            <summary>
            Gets an empty <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the parameter with the specified name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="result">Receives the result, if any.</param>
            <returns>True if a matching parameter was found; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.GetValueOrDefault``1(System.String)">
            <summary>
            Gets the value of the parameter with the specified name, or a default value
            if no such parameter exists in the collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The parameter value if found; otherwise the default value for the specified type.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Gets the value of the parameter with the specified name, or a specified default value
            if no such parameter exists in the collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="defaultValue">The default value to return if no such parameter exists in the collection.</param>
            <returns>The parameter value if found; otherwise <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.ToDictionary">
            <summary>
            Returns a dictionary populated with the contents of the <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.
            </summary>
            <returns>A dictionary populated with the contents of the <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/> from the given <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IDictionary`2"/> with the parameters.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.SetParameterProperties(System.Object)">
            <summary>
            For each parameter property on <paramref name="target"/>, updates its value to
            match the corresponding entry in the <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.
            </summary>
            <param name="target">An object that has a public writable property matching each parameter's name and type.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterView.Enumerator">
            <summary>
            An enumerator that iterates through a <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ParameterView.Enumerator.Current">
            <summary>
            Gets the current value of the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterView.Enumerator.MoveNext">
            <summary>
            Instructs the enumerator to move to the next value in the sequence.
            </summary>
            <returns>A flag to indicate whether or not there is a next value.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ParameterViewBuilder">
            <summary>
            Provides a mechanism to build a <see cref="T:Microsoft.AspNetCore.Components.ParameterView" /> with an unbound lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterViewBuilder.#ctor(System.Int32)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.ParameterViewBuilder" />.
            </summary>
            <param name="maxCapacity">The maximum number of parameters that can be held.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterViewBuilder.Add(System.String,System.Object)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ParameterViewBuilder.ToParameterView">
            <summary>
            Supplies a completed <see cref="T:Microsoft.AspNetCore.Components.ParameterView" />.
            </summary>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.ParameterView" />.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.PersistentComponentState">
            <summary>
            The state for the components and services of a components application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.PersistentComponentState.RegisterOnPersisting(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Register a callback to persist the component state when the application is about to be paused.
            Registered callbacks can use this opportunity to persist their state so that it can be retrieved when the application resumes.
            </summary>
            <param name="callback">The callback to invoke when the application is being paused.</param>
            <returns>A subscription that can be used to unregister the callback when disposed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.PersistentComponentState.RegisterOnPersisting(System.Func{System.Threading.Tasks.Task},Microsoft.AspNetCore.Components.IComponentRenderMode)">
            <summary>
            Register a callback to persist the component state when the application is about to be paused.
            Registered callbacks can use this opportunity to persist their state so that it can be retrieved when the application resumes.
            </summary>
            <param name="callback">The callback to invoke when the application is being paused.</param>
            <param name="renderMode"></param>
            <returns>A subscription that can be used to unregister the callback when disposed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.PersistentComponentState.PersistAsJson``1(System.String,``0)">
            <summary>
            Serializes <paramref name="instance"/> as JSON and persists it under the given <paramref name="key"/>.
            </summary>
            <typeparam name="TValue">The <paramref name="instance"/> type.</typeparam>
            <param name="key">The key to use to persist the state.</param>
            <param name="instance">The instance to persist.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.PersistentComponentState.TryTakeFromJson``1(System.String,``0@)">
            <summary>
            Tries to retrieve the persisted state as JSON with the given <paramref name="key"/> and deserializes it into an
            instance of type <typeparamref name="TValue"/>.
            When the key is present, the state is successfully returned via <paramref name="instance"/>
            and removed from the <see cref="T:Microsoft.AspNetCore.Components.PersistentComponentState"/>.
            </summary>
            <param name="key">The key used to persist the instance.</param>
            <param name="instance">The persisted instance.</param>
            <returns><c>true</c> if the state was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.PersistingComponentStateSubscription">
            <summary>
            Represents a subscription to the <c>OnPersisting</c> callback that <see cref="T:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/> callback will trigger
            when the application is being persisted.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.PersistingComponentStateSubscription.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderFragment">
            <summary>
            Represents a segment of UI content, implemented as a delegate that
            writes the content to a <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/> to which the content should be written.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderFragment`1">
            <summary>
            Represents a segment of UI content for an object of type <typeparamref name="TValue"/>, implemented as
            a function that returns a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>.
            </summary>
            <typeparam name="TValue">The type of object.</typeparam>
            <param name="value">The value used to build the content.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderHandle">
            <summary>
            Allows a component to interact with its renderer.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.Dispatcher">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Dispatcher" /> associated with the component.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.IsInitialized">
            <summary>
            Gets a value that indicates whether the <see cref="T:Microsoft.AspNetCore.Components.RenderHandle"/> has been
            initialized and is ready to use.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.IsRenderingOnMetadataUpdate">
            <summary>
            Gets a value that determines if the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/> is triggering a render in response to a metadata update (hot-reload) change.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.RendererInfo">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.RendererInfo"/> the component is running on.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.RenderMode">
            <summary>
            Retrieves the <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> assigned to the component.
            </summary>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> assigned to the component.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderHandle.Assets">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.ResourceAssetCollection"/> associated with the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderHandle.Render(Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Notifies the renderer that the component should be rendered.
            </summary>
            <param name="renderFragment">The content that should be rendered.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderHandle.DispatchExceptionAsync(System.Exception)">
            <summary>
            Dispatches an <see cref="T:System.Exception"/> to the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> that will be dispatched to the renderer.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when the exception has finished dispatching.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.ComponentState">
            <summary>
            Tracks the rendering state associated with an <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> instance
            within the context of a <see cref="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.Renderer"/>. This is an internal implementation
            detail of <see cref="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.Renderer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.ComponentState.#ctor(Microsoft.AspNetCore.Components.RenderTree.Renderer,System.Int32,Microsoft.AspNetCore.Components.IComponent,Microsoft.AspNetCore.Components.Rendering.ComponentState)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/>.
            </summary>
            <param name="renderer">The <see cref="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.Renderer"/> with which the new instance should be associated.</param>
            <param name="componentId">The externally visible identifier for the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>. The identifier must be unique in the context of the <see cref="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.Renderer"/>.</param>
            <param name="component">The <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> whose state is being tracked.</param>
            <param name="parentComponentState">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> for the parent component, or null if this is a root component.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.ComponentId">
            <summary>
            Gets the component ID.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.Component">
            <summary>
            Gets the component instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.ParentComponentState">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> of the parent component, or null if this is a root component.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Rendering.ComponentState.LogicalParentComponentState">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> of the logical parent component, or null if this is a root component.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.ComponentState.DisposeAsync">
            <summary>
            Disposes this instance and its associated component.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.RenderBatchBuilder">
            <summary>
            Collects the data produced by the rendering system during the course
            of rendering a single batch. This tracks both the final output data
            and the intermediate states (such as the queue of components still to
            be rendered).
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.CreateCopy">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.PostAsync``1(System.Threading.Tasks.Task,System.Action{``0},``0)">
            <summary>
            Queues a work item that invokes the <paramref name="callback"/> with this instance as the current synchronization context.
            The work item will only run once <paramref name="antecedent"/> has completed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.SendIfQuiescedOrElsePost``1(System.Action{``0},``0)">
            <summary>Workhorse for the InvokeAsync methods.</summary>
            <remarks>
            Similar to Post, but it can run the work item synchronously if the context is not busy.
            This is the main code path used by components, we want to be able to run async work but only dispatch
            if necessary.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.InvokeWithThisAsCurrentSyncCtxThenSetResult``1(System.Runtime.CompilerServices.AsyncTaskMethodBuilder,System.Action{``0},``0)">
            <summary>
            Sets the current synchronization context to this instance, invokes the <paramref name="callback"/>,
            resets the synchronization context, and sets marks the builder as completed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.DispatchException(System.Exception)">
            <summary>Invokes <see cref="E:Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.UnhandledException"/> with the supplied exception instance.</summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder">
            <summary>
            Provides methods for building a collection of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> entries.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.ChildContent">
            <summary>
            The reserved parameter name used for supplying child content.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenElement(System.Int32,System.String)">
            <summary>
            Appends a frame representing an element, i.e., a container for other frames.
            In order for the <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/> state to be valid, you must
            also call <see cref="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseElement"/> immediately after appending the
            new element's child frames.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="elementName">A value representing the type of the element.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseElement">
            <summary>
            Marks a previously appended element frame as closed. Calls to this method
            must be balanced with calls to <see cref="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenElement(System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddMarkupContent(System.Int32,System.String)">
            <summary>
            Appends a frame representing markup content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="markupContent">Content for the new markup frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,System.String)">
            <summary>
            Appends a frame representing text content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="textContent">Content for the new text frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Appends frames representing an arbitrary fragment of content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="fragment">Content to append.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent``1(System.Int32,Microsoft.AspNetCore.Components.RenderFragment{``0},``0)">
            <summary>
            Appends frames representing an arbitrary fragment of content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="fragment">Content to append.</param>
            <param name="value">The value used by <paramref name="fragment"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,System.Nullable{Microsoft.AspNetCore.Components.MarkupString})">
            <summary>
            Appends a frame representing markup content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="markupContent">Content for the new text frame, or null.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,Microsoft.AspNetCore.Components.MarkupString)">
            <summary>
            Appends a frame representing markup content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="markupContent">Content for the new markup frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,System.Object)">
            <summary>
            Appends a frame representing text content.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="textContent">Content for the new text frame.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String)">
            <summary>
            <para>
            Appends a frame representing a bool-valued attribute with value 'true'.
            </para>
            <para>
            The attribute is associated with the most recently added element.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Boolean)">
            <summary>
            <para>
            Appends a frame representing a bool-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>false</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.String)">
            <summary>
            <para>
            Appends a frame representing a string-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.MulticastDelegate)">
            <summary>
            <para>
            Appends a frame representing a delegate-valued attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <remarks>
            This method is provided for infrastructure purposes, and is used to support generated code
            that uses <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute``1(System.Int32,System.String,Microsoft.AspNetCore.Components.EventCallback{``0})">
            <summary>
            <para>
            Appends a frame representing an <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element. If the value is <c>null</c> and the
            current element is not a component, the frame will be omitted.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <remarks>
            This method is provided for infrastructure purposes, and is used to support generated code
            that uses <see cref="T:Microsoft.AspNetCore.Components.EventCallbackFactory"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Object)">
            <summary>
            Appends a frame representing a string-valued attribute.
            The attribute is associated with the most recently added element. If the value is <c>null</c>, or
            the <see cref="T:System.Boolean" /> value <c>false</c> and the current element is not a component, the
            frame will be omitted.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame)">
            <summary>
            <para>
            Appends a frame representing an attribute.
            </para>
            <para>
            The attribute is associated with the most recently added element.
            </para>
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="frame">A <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> holding the name and value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddMultipleAttributes(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds frames representing multiple attributes with the same sequence number.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="attributes">A collection of key-value pairs representing attributes.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.SetUpdatesAttributeName(System.String)">
            <summary>
            <para>
            Indicates that the preceding attribute represents an event handler
            whose execution updates the attribute with name <paramref name="updatesAttributeName"/>.
            </para>
            <para>
            This information is used by the rendering system to determine whether
            to accept a value update for the other attribute when receiving a
            call to the event handler.
            </para>
            </summary>
            <param name="updatesAttributeName">The name of another attribute whose value can be updated when the event handler is executed.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenComponent``1(System.Int32)">
            <summary>
            Appends a frame representing a child component.
            </summary>
            <typeparam name="TComponent">The type of the child component.</typeparam>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenComponent(System.Int32,System.Type)">
            <summary>
            Appends a frame representing a child component.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="componentType">The type of the child component.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddComponentParameter(System.Int32,System.String,System.Object)">
            <summary>
            Appends a frame representing a component parameter.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.SetKey(System.Object)">
            <summary>
            Assigns the specified key value to the current element or component.
            </summary>
            <param name="value">The value for the key.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseComponent">
            <summary>
            Marks a previously appended component frame as closed. Calls to this method
            must be balanced with calls to <see cref="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenComponent``1(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddElementReferenceCapture(System.Int32,System.Action{Microsoft.AspNetCore.Components.ElementReference})">
            <summary>
            Appends a frame representing an instruction to capture a reference to the parent element.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="elementReferenceCaptureAction">An action to be invoked whenever the reference value changes.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddComponentReferenceCapture(System.Int32,System.Action{System.Object})">
            <summary>
            Appends a frame representing an instruction to capture a reference to the parent component.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
            <param name="componentReferenceCaptureAction">An action to be invoked whenever the reference value changes.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddComponentRenderMode(Microsoft.AspNetCore.Components.IComponentRenderMode)">
            <summary>
            Adds a frame indicating the render mode on the enclosing component frame.
            </summary>
            <param name="renderMode">The <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddNamedEvent(System.String,System.String)">
            <summary>
            Assigns a name to an event in the enclosing element.
            </summary>
            <param name="eventType">The event type, e.g., 'onsubmit'.</param>
            <param name="assignedName">The application-assigned name.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenRegion(System.Int32)">
            <summary>
            Appends a frame representing a region of frames.
            </summary>
            <param name="sequence">An integer that represents the position of the instruction in the source code.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseRegion">
            <summary>
            Marks a previously appended region frame as closed. Calls to this method
            must be balanced with calls to <see cref="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenRegion(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.Clear">
            <summary>
            Clears the builder.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.GetFrames">
            <summary>
            Returns the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> values that have been appended.
            </summary>
            <returns>An array range of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> values.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Rendering.SimplifiedStringHashComparer">
             <summary>
             This comparer is optimized for use with dictionaries where the great majority of insertions/lookups
             don't match existing entries. For example, when building a dictionary of almost entirely unique keys.
             It's faster than the normal string comparer in this case because it doesn't use string.GetHashCode,
             and hence doesn't have to consider every character in the string.
            
             This primary scenario is <see cref="M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.ProcessDuplicateAttributes(System.Int32)"/>, which needs
             to detect when one attribute is overriding another, but in the vast majority of cases attributes don't
             actually override each other.
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderModeAttribute">
             <summary>
             Specifies a fixed rendering mode for a component type.
            
             Where possible, components should not specify any render mode this way, and should
             be implemented to work across all render modes. Component authors should only specify
             a fixed rendering mode when the component is incapable of running in other modes.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderModeAttribute.Mode">
            <summary>
            Gets the fixed rendering mode for a component type.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderExtensions.ToRange``1(Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder{``0})">
            <summary>
            Produces an <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1"/> structure describing the current contents.
            </summary>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderExtensions.ToSegment``1(Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder{``0},System.Int32,System.Int32)">
            <summary>
            Produces an <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1"/> structure describing the selected contents.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1"/></param>
            <param name="fromIndexInclusive">The index of the first item in the segment.</param>
            <param name="toIndexExclusive">One plus the index of the last item in the segment.</param>
            <returns>The <see cref="T:System.ArraySegment`1"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
            <typeparam name="T">The type of the elements in the array</typeparam>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.Array">
            <summary>
            Gets the current underlying array holding the segment's elements.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.Offset">
            <summary>
            Gets the offset into the underlying array holding the segment's elements.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.Count">
            <summary>
            Gets the number of items in the segment.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.Item(System.Int32)">
            <summary>
            Gets the specified item from the segment.
            </summary>
            <param name="index">The index into the segment.</param>
            <returns>The array entry at the specified index within the segment.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Array">
            <summary>
            Gets the underlying array instance.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Count">
            <summary>
            Gets the number of items in the array that are considered to be in use.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.#ctor(`0[],System.Int32)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1"/>.
            </summary>
            <param name="array">The array.</param>
            <param name="count">The number of items in the array that are in use.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Clone">
            <summary>
            Creates a shallow clone of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ComponentFrameFlags">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree namespace are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.ComponentFrameFlags.HasCallerSpecifiedRenderMode">
            <summary>
            Indicates that the caller has specified a render mode.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.ComponentId">
            <summary>
            Identifies the component whose render tree contains the affected form field.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.FieldValue">
            <summary>
            Specifies the form field's new value.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            </summary>
            <remarks>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange"/>.
            </remarks>
            <param name="changeType">The type of the change.</param>
            <param name="componentId">The ID of the component holding the named value.</param>
            <param name="frameIndex">The index of the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.NamedEvent"/> frame within the component's current render output.</param>
            <param name="eventType">The event type.</param>
            <param name="assignedName">The application-assigned name.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange.#ctor(Microsoft.AspNetCore.Components.RenderTree.NamedEventChangeType,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            </summary>
            <remarks>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange"/>.
            </remarks>
            <param name="changeType">The type of the change.</param>
            <param name="componentId">The ID of the component holding the named value.</param>
            <param name="frameIndex">The index of the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.NamedEvent"/> frame within the component's current render output.</param>
            <param name="eventType">The event type.</param>
            <param name="assignedName">The application-assigned name.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange.ChangeType">
            <summary>
            Describes the type of the change.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange.ComponentId">
            <summary>
            The ID of the component holding the named event.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange.FrameIndex">
            <summary>
            The index of the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.NamedEvent"/> frame within the component's current render output.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange.EventType">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.NamedEventChange.AssignedName">
            <summary>
            The application-assigned name.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.NamedEventChangeType">
            <summary>
            Describes a change to a named event.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.NamedEventChangeType.Added">
            <summary>
            Indicates that the item was added.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.NamedEventChangeType.Removed">
            <summary>
            Indicates that the item was removed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderBatch">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.UpdatedComponents">
            <summary>
            Gets the changes to components that were added or updated.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.ReferenceFrames">
            <summary>
            Gets render frames that may be referenced by entries in <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.UpdatedComponents"/>.
            For example, edit entries of type <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PrependFrame"/>
            will point to an entry in this array to specify the subtree to be prepended.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.DisposedComponentIDs">
            <summary>
            Gets the IDs of the components that were disposed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.DisposedEventHandlerIDs">
            <summary>
            Gets the IDs of the event handlers that were disposed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.NamedEventChanges">
            <summary>
            Gets the named events that were changed, or null.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.Renderer">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            </summary>
        </member>
        <member name="E:Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException">
            <summary>
            Allows the caller to handle exceptions from the SynchronizationContext when one is available.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to be used when initializing components.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Components.IComponentActivator)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to be used when initializing components.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <param name="componentActivator">The <see cref="T:Microsoft.AspNetCore.Components.IComponentActivator"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Dispatcher" /> associated with this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.ElementReferenceContext">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Components.ElementReferenceContext"/> associated with this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>,
            if it exists.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.IsRenderingOnMetadataUpdate">
            <summary>
            Gets a value that determines if the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/> is triggering a render in response to a (metadata update) hot-reload change.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.Disposed">
            <summary>
            Gets whether the renderer has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetComponentState(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> associated with the specified component.
            </summary>
            <param name="componentId">The component ID</param>
            <returns>The corresponding <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetComponentRenderMode(Microsoft.AspNetCore.Components.IComponent)">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> for a given component if available.
            </summary>
            <param name="component">The component type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetComponentState(Microsoft.AspNetCore.Components.IComponent)">
            <summary>
            Resolves the component state for a given <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> instance.
            </summary>
            <param name="component">The <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> instance</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.RendererInfo">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.RendererInfo"/> associated with this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.Assets">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.ResourceAssetCollection"/> associated with this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type)">
            <summary>
            Constructs a new component of the specified type.
            </summary>
            <param name="componentType">The type of the component to instantiate.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)">
            <summary>
            Associates the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> with the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>, assigning
            an identifier that is unique within the scope of the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>.
            </summary>
            <param name="component">The component.</param>
            <returns>The component's assigned identifier.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetCurrentRenderTreeFrames(System.Int32)">
            <summary>
            Gets the current render tree for a given component.
            </summary>
            <param name="componentId">The id for the component.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/> representing the current render tree.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32)">
            <summary>
            Performs the first render for a root component, waiting for this component and all
            children components to finish rendering in case there is any asynchronous work being
            done by any of the components. After this, the root component
            makes its own decisions about when to re-render, so there is no need to call
            this more than once.
            </summary>
            <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)"/>.</param>
            <remarks>
            Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
            start, but not wait for the entire render to complete.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32,Microsoft.AspNetCore.Components.ParameterView)">
             <summary>
             Supplies parameters for a root component, normally causing it to render. This can be
             used to trigger the first render of a root component, or to update its parameters and
             trigger a subsequent render. Note that components may also make their own decisions about
             when to re-render, and may re-render at any time.
            
             The returned <see cref="T:System.Threading.Tasks.Task"/> waits for this component and all descendant components to
             finish rendering in case there is any asynchronous work being done by any of them.
             </summary>
             <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)"/>.</param>
             <param name="initialParameters">The <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/> with the initial or updated parameters to use for rendering.</param>
             <remarks>
             Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
             start, but not wait for the entire render to complete.
             </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.RemoveRootComponent(System.Int32)">
            <summary>
            Removes the specified component from the renderer, causing the component and its
            descendants to be disposed.
            </summary>
            <param name="componentId">The ID of the root component.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetRootComponentType(System.Int32)">
            <summary>
            Gets the type of the specified root component.
            </summary>
            <param name="componentId">The root component ID.</param>
            <returns>The type of the component.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleException(System.Exception)">
            <summary>
            Allows derived types to handle exceptions during rendering. Defaults to rethrowing the original exception.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.CreateComponentState(System.Int32,Microsoft.AspNetCore.Components.IComponent,Microsoft.AspNetCore.Components.Rendering.ComponentState)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> instance to track state associated with a newly-instantiated component.
            This is called before the component is initialized and tracked within the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/>. Subclasses
            may override this method to use their own subclasses of <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/>.
            </summary>
            <param name="componentId">The ID of the newly-created component.</param>
            <param name="component">The component instance.</param>
            <param name="parentComponentState">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> associated with the parent component, or null if this is a root component.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> for the new component.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
            <summary>
            Updates the visible UI.
            </summary>
            <param name="renderBatch">The changes to the UI since the previous call.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to represent the UI update process.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64,Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo,System.EventArgs)">
            <summary>
            Notifies the renderer that an event has occurred.
            </summary>
            <param name="eventHandlerId">The <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId"/> value from the original event attribute.</param>
            <param name="eventArgs">Arguments to be passed to the event handler.</param>
            <param name="fieldInfo">Information that the renderer can use to update the state of the existing render tree to match the UI.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which will complete once all asynchronous processing related to the event
            has completed.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64,Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo,System.EventArgs,System.Boolean)">
            <summary>
            Notifies the renderer that an event has occurred.
            </summary>
            <param name="eventHandlerId">The <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId"/> value from the original event attribute.</param>
            <param name="eventArgs">Arguments to be passed to the event handler.</param>
            <param name="fieldInfo">Information that the renderer can use to update the state of the existing render tree to match the UI.</param>
            <param name="waitForQuiescence">A flag indicating whether to wait for quiescence.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> which will complete once all asynchronous processing related to the event
            has completed.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetEventArgsType(System.UInt64)">
            <summary>
            Gets the event arguments type for the specified event handler.
            </summary>
            <param name="eventHandlerId">The <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId"/> value from the original event attribute.</param>
            <returns>The parameter type expected by the event handler. Normally this is a subclass of <see cref="T:System.EventArgs"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AddPendingTask(Microsoft.AspNetCore.Components.Rendering.ComponentState,System.Threading.Tasks.Task)">
            <summary>
            Notifies the renderer that there is a pending task associated with a component. The
            renderer is regarded as quiescent when all such tasks have completed.
            </summary>
            <param name="componentState">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState"/> for the component associated with this pending task, if any.</param>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AddToRenderQueue(System.Int32,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Schedules a render for the specified <paramref name="componentId"/>. Its display
            will be populated using the specified <paramref name="renderFragment"/>.
            </summary>
            <param name="componentId">The ID of the component to render.</param>
            <param name="renderFragment">A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that will supply the updated UI contents.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender">
            <summary>
            Processes pending renders requests from components if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleExceptionViaErrorBoundary(System.Exception,Microsoft.AspNetCore.Components.Rendering.ComponentState)">
            <summary>
            If the exception can be routed to an error boundary around <paramref name="errorSourceOrNull"/>, do so.
            Otherwise handle it as fatal.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/> instance.
            </summary>
            <param name="disposing"><see langword="true"/> if this method is being invoked by <see cref="M:System.IDisposable.Dispose"/>, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.ResolveComponentForRenderMode(System.Type,System.Nullable{System.Int32},Microsoft.AspNetCore.Components.IComponentActivator,Microsoft.AspNetCore.Components.IComponentRenderMode)">
             <summary>
             Determines how to handle an <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> when obtaining a component instance.
             This is only called when a render mode is specified either at the call site or on the component type.
            
             Subclasses may override this method to return a component of a different type, or throw, depending on whether the renderer
             supports the render mode and how it implements that support.
             </summary>
             <param name="componentType">The type of component that was requested.</param>
             <param name="parentComponentId">The parent component ID, or null if it is a root component.</param>
             <param name="componentActivator">An <see cref="T:Microsoft.AspNetCore.Components.IComponentActivator"/> that should be used when instantiating component objects.</param>
             <param name="renderMode">The <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/> declared on <paramref name="componentType"/> or at the call site (for example, by the parent component).</param>
             <returns>An <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose">
            <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.Renderer.Log.__SkippingEventOnDisposedComponentStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff.ComponentId">
            <summary>
            Gets the ID of the component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff.Edits">
            <summary>
            Gets the changes to the render tree since a previous state.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.DiffContext">
             <summary>
             Exists only so that the various methods in this class can call each other without
             constantly building up long lists of parameters. Is private to this class, so the
             fact that it's a mutable struct is manageable.
            
             Always pass by ref to avoid copying, and because the 'SiblingIndex' is mutable.
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type">
            <summary>
            Gets the type of the edit operation.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.SiblingIndex">
            <summary>
            Gets the index of the sibling frame that the edit relates to.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.ReferenceFrameIndex">
            <summary>
            Gets the index of related data in an associated render frames array. For example, if the
            <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type"/> value is <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PrependFrame"/>, gets the
            index of the new frame data in an associated render tree.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.MoveToSiblingIndex">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type"/> value is <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PermutationListEntry"/>,
            gets the sibling index to which the frame should be moved.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.RemovedAttributeName">
            <summary>
            If the <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit.Type"/> value is <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.RemoveAttribute"/>,
            gets the name of the attribute that is being removed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PrependFrame">
            <summary>
            Indicates that a new frame should be inserted before the specified tree frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.RemoveFrame">
            <summary>
            Indicates that the specified tree frame should be removed.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.SetAttribute">
            <summary>
            Indicates that an attribute value should be applied to the specified frame.
            This may be a change to an existing attribute, or the addition of a new attribute.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.RemoveAttribute">
            <summary>
            Indicates that a named attribute should be removed from the specified frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.UpdateText">
            <summary>
            Indicates that the text content of the specified frame (which must be a text frame)
            should be updated.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.StepIn">
            <summary>
            Indicates that the edit position should move inside the specified frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.StepOut">
            <summary>
            Indicates that there are no further edit operations on the current frame, and the
            edit position should move back to the parent frame.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.UpdateMarkup">
            <summary>
            Indicates that the markup content of the specified frame (which must be a markup frame)
            should be updated.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PermutationListEntry">
            <summary>
            An entry in a sparse permutation list. That is, a list of old indices with
            corresponding new indices, which altogether describe a valid permutation of
            the children at the current edit position.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PermutationListEnd">
            <summary>
            Indicates that the preceding series of <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType.PermutationListEntry"/> entries
            is now complete.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.Sequence">
            <summary>
            Gets the sequence number of the frame. Sequence numbers indicate the relative source
            positions of the instructions that inserted the frames. Sequence numbers are only
            comparable within the same sequence (typically, the same source method).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType">
            <summary>
            Describes the type of this frame.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementSubtreeLength">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element"/>
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementName">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element"/>,
            gets a name representing the type of the element. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementKey">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element"/>,
            gets the element's diffing key, or null if none was specified.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.TextContent">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Text"/>,
            gets the content of the text frame. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>
            gets the ID of the corresponding event handler, if any.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeName">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>,
            gets the attribute name. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeValue">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>,
            gets the attribute value. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventUpdatesAttributeName">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute"/>,
            and the attribute represents an event handler, gets the name of another attribute whose value
            can be updated to represent the UI state prior to executing the event handler. This is
            primarily used in two-way bindings.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentFrameFlags">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>
            gets the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentFrameFlags"/> for the component frame.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentSubtreeLength">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentId">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the child component instance identifier.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentType">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the type of the child component.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentState">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the child component state object. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentKey">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the component's diffing key, or null if none was specified.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.Component">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component"/>,
            gets the child component instance. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.RegionSubtreeLength">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Region"/>
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementReferenceCaptureId">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ElementReferenceCapture"/>,
            gets the ID of the reference capture. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ElementReferenceCaptureAction">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ElementReferenceCapture"/>,
            gets the action that writes the reference to its target. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentReferenceCaptureParentFrameIndex">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentReferenceCapture"/>,
            gets the index of the parent frame representing the component being captured. Otherwise, the value is undefined.
            WARNING: This index can only be used in the context of the frame's original render tree. If the frame is
                     copied elsewhere, such as to the ReferenceFrames buffer of a RenderTreeDiff, then the index will
                     not relate to entries in that other buffer.
                     Currently there's no scenario where this matters, but if there was, we could change all of the subtree
                     initialization logic in RenderTreeDiffBuilder to walk the frames hierarchically, then it would know
                     the parent index at the point where it wants to initialize the ComponentReferenceCapture frame.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentReferenceCaptureAction">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentReferenceCapture"/>,
            gets the action that writes the reference to its target. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.MarkupContent">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Markup"/>,
            gets the content of the markup frame. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ComponentRenderMode">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentRenderMode"/>,
            gets the specified <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode"/>. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.NamedEventType">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.NamedEvent"/>,
            gets the event type. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.NamedEventAssignedName">
            <summary>
            If the <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.FrameType"/> property equals <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.NamedEvent"/>,
            gets the assigned name. Otherwise, the value is undefined.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameArrayBuilder">
            <summary>
            A special subclass of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1"/> that contains methods optimized for appending <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/> entries.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType">
            <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.None">
            <summary>
            Used only for uninitialized frames.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Element">
            <summary>
            Represents a container for other frames.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Text">
            <summary>
            Represents text content.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Attribute">
            <summary>
            Represents a key-value pair associated with another <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Component">
            <summary>
            Represents a child component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Region">
            <summary>
            Defines the boundary around range of sibling frames that should be treated as an
            unsplittable group for the purposes of diffing. This is typically used when appending
            a tree fragment generated by external code, because the sequence numbers in that tree
            fragment are not comparable to sequence numbers outside it.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ElementReferenceCapture">
            <summary>
            Represents an instruction to capture or update a reference to the parent element.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentReferenceCapture">
            <summary>
            Represents an instruction to capture or update a reference to the parent component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.Markup">
            <summary>
            Represents a block of markup content.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.ComponentRenderMode">
            <summary>
            Represents an instruction to use a specified render mode for the component.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType.NamedEvent">
            <summary>
            Represents an application-assigned name for an event.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1">
             <summary>
             Implements a list that uses an array of objects to store the elements.
            
             This differs from a <see cref="T:System.Collections.Generic.List`1"/> in that
             it not only grows as required but also shrinks if cleared with significant
             excess capacity. This makes it useful for component rendering, because
             components can be long-lived and re-render frequently, with the rendered size
             varying dramatically depending on the user's navigation in the app.
             </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.#ctor(System.Int32,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Buffer">
            <summary>
            Gets the underlying buffer.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Append(`0@)">
            <summary>
            Appends a new item, automatically resizing the underlying array if necessary.
            </summary>
            <param name="item">The item to append.</param>
            <returns>The index of the appended item.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Overwrite(System.Int32,`0@)">
            <summary>
            Sets the supplied value at the specified index. The index must be within
            range for the array.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.RemoveLast">
            <summary>
            Removes the last item.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.InsertExpensive(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index, moving the contents of the subsequent entries along by one.
            </summary>
            <param name="index">The index at which the value is to be inserted.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Clear">
            <summary>
            Marks the array as empty, also shrinking the underlying storage if it was
            not being used to near its full capacity.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RendererInfo">
            <summary>
            Provides information about the platform that the component is running on.
            </summary>
            <param name="rendererName">The name of the platform.</param>
            <param name="isInteractive">A flag to indicate if the platform is interactive.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RendererInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Provides information about the platform that the component is running on.
            </summary>
            <param name="rendererName">The name of the platform.</param>
            <param name="isInteractive">A flag to indicate if the platform is interactive.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RendererInfo.Name">
            <summary>
            Gets the name of the platform.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RendererInfo.IsInteractive">
            <summary>
            Gets a flag to indicate if the platform is interactive.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ResourceAsset">
            <summary>
            A resource of the components application, such as a script, stylesheet or image.
            </summary>
            <param name="url">The URL of the resource.</param>
            <param name="properties">The properties associated to this resource.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ResourceAsset.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Components.ResourceAssetProperty})">
            <summary>
            A resource of the components application, such as a script, stylesheet or image.
            </summary>
            <param name="url">The URL of the resource.</param>
            <param name="properties">The properties associated to this resource.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ResourceAsset.Url">
            <summary>
            Gets the URL that identifies this resource.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ResourceAsset.Properties">
            <summary>
            Gets a list of properties associated to this resource.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ResourceAssetCollection">
            <summary>
            Describes a mapping of static assets to their corresponding unique URLs.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Components.ResourceAssetCollection.Empty">
            <summary>
            An empty <see cref="T:Microsoft.AspNetCore.Components.ResourceAssetCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ResourceAssetCollection.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Components.ResourceAsset})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.Components.ResourceAssetCollection"/>
            </summary>
            <param name="resources">The list of resources available.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ResourceAssetCollection.Item(System.String)">
            <summary>
            Gets the unique content-based URL for the specified static asset.
            </summary>
            <param name="key">The asset name.</param>
            <returns>The unique URL if availabe, the same <paramref name="key"/> if not available.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ResourceAssetCollection.IsContentSpecificUrl(System.String)">
            <summary>
            Determines whether the specified path is a content-specific URL.
            </summary>
            <param name="path">The path to check.</param>
            <returns><c>true</c> if the path is a content-specific URL; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ResourceAssetProperty">
            <summary>
            A resource property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.ResourceAssetProperty.#ctor(System.String,System.String)">
            <summary>
            A resource property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ResourceAssetProperty.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.ResourceAssetProperty.Value">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RouteAttribute">
            <summary>
            Indicates that the associated component should match the specified route template pattern.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RouteAttribute"/>.
            </summary>
            <param name="template">The route template.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteAttribute.Template">
            <summary>
            Gets the route template.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RouteView">
            <summary>
            Displays the specified page component, rendering it inside its layout
            and any further nested layouts.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteView.RouteData">
            <summary>
            Gets or sets the route data. This determines the page that will be
            displayed and the parameter values that will be supplied to the page.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout">
            <summary>
            Gets or sets the type of a layout to be used if the page does not
            declare any layout. If specified, the type must implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>
            and accept a parameter named <see cref="P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteView.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteView.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteView.Render(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <summary>
            Renders the component.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/>.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.ExcludeFromInteractiveRoutingAttribute">
            <summary>
            When applied to a page component, indicates that the interactive <see cref="T:Microsoft.AspNetCore.Components.Routing.Router"/> component should
            ignore that page. This means that navigations to the page will not be resolved by interactive routing,
            but instead will cause a full page reload.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.IHostEnvironmentNavigationManager">
            <summary>
            An optional interface for <see cref="T:Microsoft.AspNetCore.Components.NavigationManager" /> implementations that must be initialized
            by the host.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.IHostEnvironmentNavigationManager.Initialize(System.String,System.String)">
            <summary>
            Initializes the <see cref="T:Microsoft.AspNetCore.Components.NavigationManager" />.
            </summary>
            <param name="baseUri">The base URI.</param>
            <param name="uri">The absolute URI.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.INavigationInterception">
            <summary>
            Contract to setup navigation interception on the client.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.INavigationInterception.EnableNavigationInterceptionAsync">
            <summary>
            Enables navigation interception on the client.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.IRoutingStateProvider">
            <summary>
            Provides RouteData
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.IRoutingStateProvider.RouteData">
            <summary>
            Gets RouteData
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash">
            <summary>
            Contract to setup scroll to location hash.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash.RefreshScrollPositionForHash(System.String)">
            <summary>
            Refreshes scroll position for hash on the client.
            </summary>
            <param name="locationAbsolute">Absolute URL of location</param> 
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs" /> for <see cref="E:Microsoft.AspNetCore.Components.NavigationManager.LocationChanged" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs" />.
            </summary>
            <param name="location">The location.</param>
            <param name="isNavigationIntercepted">A value that determines if navigation for the link was intercepted.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.Location">
            <summary>
            Gets the changed location.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.IsNavigationIntercepted">
            <summary>
            Gets a value that determines if navigation for the link was intercepted.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.HistoryEntryState">
            <summary>
            Gets the state associated with the current history entry.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.LocationChangingContext">
            <summary>
            Contains context for a change to the browser's current location.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangingContext.TargetLocation">
            <summary>
            Gets the target location.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangingContext.HistoryEntryState">
            <summary>
            Gets the state associated with the target history entry.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangingContext.IsNavigationIntercepted">
            <summary>
            Gets whether this navigation was intercepted from a link.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.LocationChangingContext.CancellationToken">
            <summary>
            Gets a <see cref="T:System.Threading.CancellationToken"/> that can be used to determine if this navigation was canceled
            (for example, because the user has triggered a different navigation).
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.LocationChangingContext.PreventNavigation">
            <summary>
            Prevents this navigation from continuing.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.NavigationContext">
            <summary>
            Provides information about the current asynchronous navigation event
            including the target path and the cancellation token.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.NavigationContext.Path">
            <summary>
            The target path for the navigation.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.NavigationContext.CancellationToken">
            <summary>
            The <see cref="P:Microsoft.AspNetCore.Components.Routing.NavigationContext.CancellationToken"/> to use to cancel navigation.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.Router">
            <summary>
            A component that supplies route data corresponding to the current navigation state.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly">
            <summary>
            Gets or sets the assembly that should be searched for components matching the URI.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies">
            <summary>
            Gets or sets a collection of additional assemblies that should be searched for components
            that can match URIs.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.NotFound">
            <summary>
            Gets or sets the content to display when no match is found for the requested route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.Found">
            <summary>
            Gets or sets the content to display when a match is found for the requested route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.Navigating">
            <summary>
            Get or sets the content to display when asynchronous navigation is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync">
            <summary>
            Gets or sets a handler that should be called before navigating to a new page.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches">
            <summary>
            Gets or sets a flag to indicate whether route matching should prefer exact matches
            over wildcards.
            <para>This property is obsolete and configuring it does nothing.</para>
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Router.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.UrlValueConstraint">
            <summary>
            Shared logic for parsing tokens from route values and querystring values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.#ctor">
            <summary>
            Creates an empty <see cref="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary"/> initialized with the specified <paramref name="values"/>.
            </summary>
            <param name="values">A sequence of values to add to the dictionary..</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Count">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Keys">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Values">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Clear">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Remove(System.String,System.Object@)">
            <summary>
            Attempts to remove and return the value that has the specified key from the <see cref="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="value">When this method returns, contains the object removed from the <see cref="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary"/>, or <c>null</c> if key does not exist.</param>
            <returns>
            <c>true</c> if the object was removed successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.TryAdd(System.String,System.Object)">
            <summary>
            Attempts to the add the provided <paramref name="key"/> and <paramref name="value"/> to the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns <c>true</c> if the value was added. Returns <c>false</c> if the key was already present.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator.#ctor(Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <summary>
            Instantiates a new enumerator with the values provided in <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">A <see cref="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator.Dispose">
            <summary>
            Releases resources used by the <see cref="T:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.RouteValueDictionary.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory.Pattern(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePattern"/> from a collection of segments.
            </summary>
            <param name="rawText">The raw text to associate with the route pattern. May be null.</param>
            <param name="segments">The collection of segments.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePattern"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory.LiteralPart(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart"/> from the provided text
            content.
            </summary>
            <param name="content">The text content.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory.SeparatorPart(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart"/> from the provided text
            content.
            </summary>
            <param name="content">The text content.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory.Constraint(System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/> from the provided contraint.
            </summary>
            <param name="constraint">
            The constraint object, which must be of type <see cref="T:Microsoft.AspNetCore.Routing.IRouteConstraint"/>
            or <see cref="T:System.String"/>. If the constraint object is a <see cref="T:System.String"/>
            then it will be transformed into an instance of <see cref="T:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint"/>.
            </param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory.Constraint(Microsoft.AspNetCore.Routing.IRouteConstraint)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/> from the provided constraint.
            </summary>
            <param name="constraint">
            The constraint object.
            </param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory.ParameterPolicy(Microsoft.AspNetCore.Routing.IParameterPolicy)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/> from the provided object.
            </summary>
            <param name="parameterPolicy">
            The parameter policy object.
            </param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/>.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RangeConstraint_MinShouldBeLessThanOrEqualToMax">
            <summary>The value for argument '{0}' should be less than or equal to the value for the argument '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRangeConstraint_MinShouldBeLessThanOrEqualToMax(System.Object,System.Object)">
            <summary>The value for argument '{0}' should be less than or equal to the value for the argument '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.DefaultInlineConstraintResolver_AmbiguousCtors">
            <summary>The constructor to use for activating the constraint type '{0}' is ambiguous. Multiple constructors were found with the following number of parameters: {1}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatDefaultInlineConstraintResolver_AmbiguousCtors(System.Object,System.Object)">
            <summary>The constructor to use for activating the constraint type '{0}' is ambiguous. Multiple constructors were found with the following number of parameters: {1}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.DefaultInlineConstraintResolver_CouldNotFindCtor">
            <summary>Could not find a constructor for constraint type '{0}' with the following number of parameters: {1}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatDefaultInlineConstraintResolver_CouldNotFindCtor(System.Object,System.Object)">
            <summary>Could not find a constructor for constraint type '{0}' with the following number of parameters: {1}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.DefaultInlineConstraintResolver_TypeNotConstraint">
            <summary>The constraint type '{0}' which is mapped to constraint key '{1}' must implement the '{2}' interface.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatDefaultInlineConstraintResolver_TypeNotConstraint(System.Object,System.Object,System.Object)">
            <summary>The constraint type '{0}' which is mapped to constraint key '{1}' must implement the '{2}' interface.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint">
            <summary>The constraint entry '{0}' - '{1}' on the route '{2}' must have a string value or be of a type which implements '{3}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint(System.Object,System.Object,System.Object,System.Object)">
            <summary>The constraint entry '{0}' - '{1}' on the route '{2}' must have a string value or be of a type which implements '{3}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RouteConstraintBuilder_CouldNotResolveConstraint">
            <summary>The constraint entry '{0}' - '{1}' on the route '{2}' could not be resolved by the constraint resolver of type '{3}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRouteConstraintBuilder_CouldNotResolveConstraint(System.Object,System.Object,System.Object,System.Object)">
            <summary>The constraint entry '{0}' - '{1}' on the route '{2}' could not be resolved by the constraint resolver of type '{3}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RoutePatternBuilder_CollectionCannotBeEmpty">
            <summary>The collection cannot be empty.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.ConstraintMustBeStringOrConstraint">
            <summary>The constraint entry '{0}' - '{1}' must have a string value or be of a type which implements '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatConstraintMustBeStringOrConstraint(System.Object,System.Object,System.Object)">
            <summary>The constraint entry '{0}' - '{1}' must have a string value or be of a type which implements '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RoutePattern_InvalidConstraintReference">
            <summary>Invalid constraint '{0}'. A constraint must be of type 'string' or '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRoutePattern_InvalidConstraintReference(System.Object,System.Object)">
            <summary>Invalid constraint '{0}'. A constraint must be of type 'string' or '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RoutePattern_InvalidParameterConstraintReference">
            <summary>Invalid constraint '{0}' for parameter '{1}'. A constraint must be of type 'string', '{2}', or '{3}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRoutePattern_InvalidParameterConstraintReference(System.Object,System.Object,System.Object,System.Object)">
            <summary>Invalid constraint '{0}' for parameter '{1}'. A constraint must be of type 'string', '{2}', or '{3}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RoutePattern_ConstraintReferenceNotFound">
            <summary>The constraint reference '{0}' could not be resolved to a type. Register the constraint type with '{1}.{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRoutePattern_ConstraintReferenceNotFound(System.Object,System.Object,System.Object)">
            <summary>The constraint reference '{0}' could not be resolved to a type. Register the constraint type with '{1}.{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RoutePattern_InvalidStringConstraintReference">
            <summary>Invalid constraint type '{0}' registered as '{1}'. A constraint  type must either implement '{2}', or inherit from '{3}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatRoutePattern_InvalidStringConstraintReference(System.Object,System.Object,System.Object,System.Object)">
            <summary>Invalid constraint type '{0}' registered as '{1}'. A constraint  type must either implement '{2}', or inherit from '{3}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.RegexRouteContraint_NotConfigured">
            <summary>A route parameter uses the regex constraint, which isn't registered. To enable it add the property 'BlazorRoutingEnableRegexConstraint' to your project file inside a `PropertyGroup`.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>Value must be greater than or equal to {0}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatArgumentMustBeGreaterThanOrEqualTo(System.Object)">
            <summary>Value must be greater than or equal to {0}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_CannotHaveCatchAllInMultiSegment">
            <summary>A path segment that contains more than one section, such as a literal section or a parameter, cannot contain a catch-all parameter.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_CannotHaveConsecutiveParameters">
            <summary>A path segment cannot contain two consecutive parameters. They must be separated by a '/' or by a literal string.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_CannotHaveConsecutiveSeparators">
            <summary>The route template separator character '/' cannot appear consecutively. It must be separated by either a parameter or a literal value.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly">
            <summary>The route parameter '{0}' has both an inline default value and an explicit default value specified. A route parameter cannot contain an inline default value when a default value is specified explicitly. Consider removing one of them.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly(System.Object)">
            <summary>The route parameter '{0}' has both an inline default value and an explicit default value specified. A route parameter cannot contain an inline default value when a default value is specified explicitly. Consider removing one of them.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_CatchAllCannotBeOptional">
            <summary>A catch-all parameter cannot be marked optional.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_CatchAllMustBeLast">
            <summary>A catch-all parameter can only appear as the last segment of the route template.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_Exception">
            <summary>An error occurred while creating the route with name '{0}' and template '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_Exception(System.Object,System.Object)">
            <summary>An error occurred while creating the route with name '{0}' and template '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_InvalidLiteral">
            <summary>The literal section '{0}' is invalid. Literal sections cannot contain the '?' character.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_InvalidLiteral(System.Object)">
            <summary>The literal section '{0}' is invalid. Literal sections cannot contain the '?' character.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_InvalidParameterName">
            <summary>The route parameter name '{0}' is invalid. Route parameter names must be non-empty and cannot contain these characters: '{{', '}}', '/'. The '?' character marks a parameter as optional, and can occur only at the end of the parameter. The '*' character mark ...</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_InvalidParameterName(System.Object)">
            <summary>The route parameter name '{0}' is invalid. Route parameter names must be non-empty and cannot contain these characters: '{{', '}}', '/'. The '?' character marks a parameter as optional, and can occur only at the end of the parameter. The '*' character mark ...</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_InvalidRouteTemplate">
            <summary>The route template cannot start with a '~' character unless followed by a '/'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_MismatchedParameter">
            <summary>There is an incomplete parameter in the route template. Check that each '{' character has a matching '}' character.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_OptionalCannotHaveDefaultValue">
            <summary>An optional parameter cannot have default value.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_OptionalParameterCanbBePrecededByPeriod">
            <summary>In the segment '{0}', the optional parameter '{1}' is preceded by an invalid segment '{2}'. Only a period (.) can precede an optional parameter.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_OptionalParameterCanbBePrecededByPeriod(System.Object,System.Object,System.Object)">
            <summary>In the segment '{0}', the optional parameter '{1}' is preceded by an invalid segment '{2}'. Only a period (.) can precede an optional parameter.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_OptionalParameterHasTobeTheLast">
            <summary>An optional parameter must be at the end of the segment. In the segment '{0}', optional parameter '{1}' is followed by '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_OptionalParameterHasTobeTheLast(System.Object,System.Object,System.Object)">
            <summary>An optional parameter must be at the end of the segment. In the segment '{0}', optional parameter '{1}' is followed by '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_RepeatedParameter">
            <summary>The route parameter name '{0}' appears more than one time in the route template.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Routing.Resources.FormatTemplateRoute_RepeatedParameter(System.Object)">
            <summary>The route parameter name '{0}' appears more than one time in the route template.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Routing.Resources.TemplateRoute_UnescapedBrace">
            <summary>In a route parameter, '{' and '}' must be escaped with '{{' and '}}'.</summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RouteData">
            <summary>
            Describes information determined during routing that specifies
            the page to be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteData.#ctor(System.Type,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RouteData"/>.
            </summary>
            <param name="pageType">The type of the page matching the route, which must implement <see cref="T:Microsoft.AspNetCore.Components.IComponent"/>.</param>
            <param name="routeValues">The route parameter values extracted from the matched route.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteData.PageType">
            <summary>
            Gets the type of the page matching the route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteData.RouteValues">
            <summary>
            Gets route parameter values extracted from the matched route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RouteData.Template">
            <summary>
            Gets the route template that was used to match the route if any.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RouteTableFactory">
            <summary>
            Resolves components for an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RouteTableFactory.RouteComparison(Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry,Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry)">
             <summary>
             Route precedence algorithm.
             We collect all the routes and sort them from most specific to
             less specific. The specificity of a route is given by the specificity
             of its segments and the position of those segments in the route.
             * A literal segment is more specific than a parameter segment.
             * A parameter segment with more constraints is more specific than one with fewer constraints
             * Segment earlier in the route are evaluated before segments later in the route.
             For example:
             /Literal is more specific than /Parameter
             /Route/With/{parameter} is more specific than /{multiple}/With/{parameters}
             /Product/{id:int} is more specific than /Product/{id}
            
             Routes can be ambiguous if:
             They are composed of literals and those literals have the same values (case insensitive)
             They are composed of a mix of literals and parameters, in the same relative order and the
             literals have the same values.
             For example:
             * /literal and /Literal
             /{parameter}/literal and /{something}/literal
             /{parameter:constraint}/literal and /{something:constraint}/literal
            
             To calculate the precedence we sort the list of routes as follows:
             * Shorter routes go first.
             * A literal wins over a parameter in precedence.
             * For literals with different values (case insensitive) we choose the lexical order
             * For parameters with different numbers of constraints, the one with more wins
             If we get to the end of the comparison routing we've detected an ambiguous pair of routes.
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Sections.SectionContent">
            <summary>
            Provides content to <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionOutlet"/> components with matching <see cref="P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionName">
            <summary>
            Gets or sets the <see cref="T:System.String"/> ID that determines which <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionOutlet"/> instance will render
            the content of this instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> ID that determines which <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionOutlet"/> instance will render
            the content of this instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Sections.SectionContent.IsDefaultContent">
            <summary>
            Gets or sets whether this component should provide the default content for the target
            <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionOutlet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent">
            <summary>
            Gets or sets the content to be rendered in corresponding <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionOutlet"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Sections.SectionContent.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Sections.SectionOutlet">
            <summary>
            Renders content provided by <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionContent"/> components with matching <see cref="P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionName">
            <summary>
            Gets or sets the <see cref="T:System.String"/> ID that determines which <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionContent"/> instances will provide
            content to this instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> ID that determines which <see cref="T:Microsoft.AspNetCore.Components.Sections.SectionContent"/> instances will provide
            content to this instance.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.Sections.SectionOutlet.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.StreamRenderingAttribute">
             <summary>
             An attribute to indicate whether to stream the rendering of a component and its descendants.
             
             This attribute only takes effect within renderers that support streaming rendering (for example,
             server-side HTML rendering from a Razor Component endpoint). In other hosting models it has no effect.
            
             If a component type does not declare this attribute, then instances of that component type will share
             the same streaming rendering mode as their parent component.
             </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.StreamRenderingAttribute.#ctor(System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.StreamRenderingAttribute"/>
            </summary>
            <param name="enabled">A flag to indicate whether this component and its descendants should stream their rendering. The default value is true.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.StreamRenderingAttribute.Enabled">
            <summary>
            Gets a flag indicating whether this component and its descendants should stream their rendering.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute">
            <summary>
            Indicates that routing components may supply a value for the parameter from the
            current URL querystring. They may also supply further values if the URL querystring changes.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute.Name">
            <summary>
            Gets or sets the name of the querystring parameter. If null, the querystring
            parameter is assumed to have the same name as the associated property.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.SupplyParameterFromQueryProviderServiceCollectionExtensions">
            <summary>
            Enables component parameters to be supplied from the query string with <see cref="T:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.SupplyParameterFromQueryProviderServiceCollectionExtensions.AddSupplyValueFromQueryProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Enables component parameters to be supplied from the query string with <see cref="T:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.HotReload.HotReloadManager.IsSubscribedTo">
            <summary>
            Gets a value that determines if OnDeltaApplied is subscribed to.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.HotReload.HotReloadManager.UpdateApplication(System.Type[])">
            <summary>
            MetadataUpdateHandler event. This is invoked by the hot reload host via reflection.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Internal.LinkerFlags.JsonSerialized">
            <summary>
            Flags for a member that is JSON (de)serialized.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Internal.LinkerFlags.Component">
            <summary>
            Flags for a component
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Internal.LinkerFlags.JSInvokable">
            <summary>
            Flags for a JSInvokable type.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Internal.QueryStringEnumerable">
            <summary>
            An enumerable that can supply the name/value pairs from a URI query string.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Internal.QueryStringEnumerable"/>.
            </summary>
            <param name="queryString">The query string.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.#ctor(System.ReadOnlyMemory{System.Char})">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Internal.QueryStringEnumerable"/>.
            </summary>
            <param name="queryString">The query string.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the name/value pairs in the query string.
            </summary>
            <returns>An object that can iterate through the name/value pairs in the query string.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair">
            <summary>
            Represents a single name/value pair extracted from a query string during enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair.EncodedName">
            <summary>
            Gets the name from this name/value pair in its original encoded form.
            To get the decoded string, call <see cref="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair.DecodeName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair.EncodedValue">
            <summary>
            Gets the value from this name/value pair in its original encoded form.
            To get the decoded string, call <see cref="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair.DecodeValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair.DecodeName">
            <summary>
            Decodes the name from this name/value pair.
            </summary>
            <returns>Characters representing the decoded name.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.EncodedNameValuePair.DecodeValue">
            <summary>
            Decodes the value from this name/value pair.
            </summary>
            <returns>Characters representing the decoded value.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Internal.QueryStringEnumerable.Enumerator">
            <summary>
            An enumerator that supplies the name/value pairs from a URI query string.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Internal.QueryStringEnumerable.Enumerator.Current">
            <summary>
            Gets the currently referenced key/value pair in the query string being enumerated.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.QueryStringEnumerable.Enumerator.MoveNext">
            <summary>
            Moves to the next key/value pair in the query string being enumerated.
            </summary>
            <returns>True if there is another key/value pair, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeRequestLine(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Boolean)">
            <summary>
            Unescape a URL path
            </summary>
            <param name="source">The byte span represents a UTF8 encoding url path.</param>
            <param name="destination">The byte span where unescaped url path is copied to.</param>
            <param name="isFormEncoding">Whether we are doing form encoding or not.</param>
            <returns>The length of the byte sequence of the unescaped url path.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeInPlace(System.Span{System.Byte},System.Boolean)">
            <summary>
            Unescape a URL path in place.
            </summary>
            <param name="buffer">The byte span represents a UTF8 encoding url path.</param>
            <param name="isFormEncoding">Whether we are doing form encoding or not.</param>
            <returns>The number of the bytes representing the result.</returns>
            <remarks>
            The unescape is done in place, which means after decoding the result is the subset of
            the input span.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeCore(System.Int32@,System.Int32@,System.Span{System.Byte},System.Boolean)">
            <summary>
            Unescape the percent-encodings
            </summary>
            <param name="sourceIndex">The iterator point to the first % char</param>
            <param name="destinationIndex">The place to write to</param>
            <param name="buffer">The byte array</param>
            <param name="isFormEncoding">Whether we are doing form encodoing</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.UnescapePercentEncoding(System.Int32@,System.Span{System.Byte},System.Boolean)">
             <summary>
             Read the percent-encoding and try unescape it.
            
             The operation first peek at the character the <paramref name="scan"/>
             iterator points at. If it is % the <paramref name="scan"/> is then
             moved on to scan the following to characters. If the two following
             characters are hexadecimal literals they will be unescaped and the
             value will be returned.
            
             If the first character is not % the <paramref name="scan"/> iterator
             will be removed beyond the location of % and -1 will be returned.
            
             If the following two characters can't be successfully unescaped the
             <paramref name="scan"/> iterator will be move behind the % and -1
             will be returned.
             </summary>
             <param name="scan">The value to read</param>
             <param name="buffer">The byte array</param>
             <param name="isFormEncoding">Whether we are decoding a form or not. Will escape '/' if we are doing form encoding</param>
             <returns>The unescaped byte if success. Otherwise return -1.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.ReadHex(System.Int32@,System.Span{System.Byte})">
             <summary>
             Read the next char and convert it into hexadecimal value.
            
             The <paramref name="scan"/> index will be moved to the next
             byte no matter whether the operation successes.
             </summary>
             <param name="scan">The index of the byte in the buffer to read</param>
             <param name="buffer">The byte span from which the hex to be read</param>
             <returns>The hexadecimal value if successes, otherwise -1.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeRequestLine(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
            Unescape a URL path
            </summary>
            <param name="source">The escape sequences is expected to be well-formed UTF-8 code units.</param>
            <param name="destination">The char span where unescaped url path is copied to.</param>
            <returns>The length of the char sequence of the unescaped url path.</returns>
            <remarks>
            Form Encoding is not supported compared to the <see cref="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeRequestLine(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Boolean)" />
            for performance gains, as current use-cases does not require it.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeInPlace(System.Span{System.Char})">
            <summary>
            Unescape a URL path in place.
            </summary>
            <param name="buffer">The escape sequences is expected to be well-formed UTF-8 code units.</param>
            <returns>The number of the chars representing the result.</returns>
            <remarks>
            The unescape is done in place, which means after decoding the result is the subset of
            the input span.
            Form Encoding is not supported compared to the <see cref="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeInPlace(System.Span{System.Byte},System.Boolean)" />
            for performance gains, as current use-cases does not require it.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.DecodeCore(System.Int32@,System.Int32@,System.Span{System.Char})">
            <summary>
            Unescape the percent-encodings
            </summary>
            <param name="sourceIndex">The iterator point to the first % char</param>
            <param name="destinationIndex">The place to write to</param>
            <param name="buffer">The char array</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.UnescapePercentEncoding(System.Int32@,System.ReadOnlySpan{System.Char})">
             <summary>
             Read the percent-encoding and try unescape it.
            
             The operation first peek at the character the <paramref name="scan"/>
             iterator points at. If it is % the <paramref name="scan"/> is then
             moved on to scan the following to characters. If the two following
             characters are hexadecimal literals they will be unescaped and the
             value will be returned.
            
             If the first character is not % the <paramref name="scan"/> iterator
             will be removed beyond the location of % and -1 will be returned.
            
             If the following two characters can't be successfully unescaped the
             <paramref name="scan"/> iterator will be move behind the % and -1
             will be returned.
             </summary>
             <param name="scan">The value to read</param>
             <param name="buffer">The char array</param>
             <returns>The unescaped char if success. Otherwise return -1.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Internal.UrlDecoder.ReadHex(System.Int32@,System.ReadOnlySpan{System.Char})">
             <summary>
             Read the next char and convert it into hexadecimal value.
            
             The <paramref name="scan"/> index will be moved to the next
             char no matter whether the operation successes.
             </summary>
             <param name="scan">The index of the char in the buffer to read</param>
             <param name="buffer">The char span from which the hex to be read</param>
             <returns>The hexadecimal value if successes, otherwise -1.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Shared.DictionaryItemDebugView`2">
            <summary>
            Defines a key/value pair for displaying an item of a dictionary by a debugger.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer">
             <summary>
             An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation that compares objects as-if
             they were route value strings.
             </summary>
             <remarks>
             Values that are are not strings are converted to strings using
             <c>Convert.ToString(x, CultureInfo.InvariantCulture)</c>. <c>null</c> values are converted
             to the empty string.
            
             strings are compared using <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
             </remarks>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer.Default">
            <summary>
            A default instance of the <see cref="T:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer.Equals(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer.GetHashCode(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.RouteCreationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.RouteCreationException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Tree.InboundMatch">
            <summary>
            A candidate route to match incoming URLs in a <see cref="T:Microsoft.AspNetCore.Routing.Tree.TreeRouter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.InboundMatch.Entry">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Constraints">
            <summary>
            Gets or sets the route constraints.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Defaults">
            <summary>
            Gets or sets the route defaults.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Order">
            <summary>
            Gets or sets the order of the entry.
            </summary>
            <remarks>
            Entries are ordered first by <see cref="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Order"/> (ascending) then by <see cref="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Precedence"/> (descending).
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Precedence">
            <summary>
            Gets or sets the precedence of the entry.
            </summary>
            <remarks>
            Entries are ordered first by <see cref="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Order"/> (ascending) then by <see cref="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.Precedence"/> (descending).
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.RouteName">
            <summary>
            Gets or sets the name of the route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.TreeRouter.Version">
            <summary>
            Gets the version of this route.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode">
            <summary>
            A node in a <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode"/>.
            </summary>
            <param name="length">The length of the path to this node in the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Depth">
            <summary>
            Gets the length of the path to this node in the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.IsCatchAll">
            <summary>
            Gets or sets a value indicating whether this node represents a catch all segment.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Matches">
            <summary>
            Gets the list of matching route entries associated with this node.
            </summary>
            <remarks>
            These entries are sorted by precedence then template.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Literals">
            <summary>
            Gets the literal segments following this segment.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedParameters">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode"/> representing
            parameter segments with constraints following this segment in the <see cref="T:Microsoft.AspNetCore.Routing.Tree.TreeRouter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Parameters">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode"/> representing
            parameter segments following this segment in the <see cref="T:Microsoft.AspNetCore.Routing.Tree.TreeRouter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedCatchAlls">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode"/> representing
            catch all parameter segments with constraints following this segment in the <see cref="T:Microsoft.AspNetCore.Routing.Tree.TreeRouter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.CatchAlls">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode"/> representing
            catch all parameter segments following this segment in the <see cref="T:Microsoft.AspNetCore.Routing.Tree.TreeRouter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.
            </summary>
            <param name="order">The order associated with routes in this <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree.Order">
            <summary>
            Gets the order of the routes associated with this <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree.Root">
            <summary>
            Gets the root of the <see cref="T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValueAny">
            <summary>
            A marker object that can be used in <see cref="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValues"/> to designate that
            any non-null or non-empty value is required.
            </summary>
            <remarks>
            <see cref="F:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValueAny"/> is only use in routing is in <see cref="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValues"/>.
            <see cref="F:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValueAny"/> is not valid as a route value, and will convert to the null/empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.Defaults">
            <summary>
            Gets the set of default values for the route pattern.
            The keys of <see cref="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.Defaults"/> are the route parameter names.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.ParameterPolicies">
            <summary>
            Gets the set of parameter policy references for the route pattern.
            The keys of <see cref="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.ParameterPolicies"/> are the route parameter names.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValues">
             <summary>
             Gets a collection of route values that must be provided for this route pattern to be considered
             applicable.
             </summary>
             <remarks>
             <para>
             <see cref="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RequiredValues"/> allows a framework to substitute route values into a parameterized template
             so that the same route template specification can be used to create multiple route patterns.
             <example>
             This example shows how a route template can be used with required values to substitute known
             route values for parameters.
             <code>
             Route Template: "{controller=Home}/{action=Index}/{id?}"
             Route Values: { controller = "Store", action = "Index" }
             </code>
            
             A route pattern produced in this way will match and generate URL paths like: <c>/Store</c>,
             <c>/Store/Index</c>, and <c>/Store/Index/17</c>.
             </example>
             </para>
             </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.InboundPrecedence">
            <summary>
            Gets the precedence value of the route pattern for URL matching.
            </summary>
            <remarks>
            Precedence is a computed value based on the structure of the route pattern
            used for building URL matching data structures.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.OutboundPrecedence">
            <summary>
            Gets the precedence value of the route pattern for URL generation.
            </summary>
            <remarks>
            Precedence is a computed value based on the structure of the route pattern
            used for building URL generation data structures.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.RawText">
            <summary>
            Gets the raw text supplied when parsing the route pattern. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.Parameters">
            <summary>
            Gets the list of route parameters.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.PathSegments">
            <summary>
            Gets the list of path segments.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.GetParameter(System.String)">
            <summary>
            Gets the parameter matching the given name.
            </summary>
            <param name="name">The name of the parameter to match.</param>
            <returns>The matching parameter or <c>null</c> if no parameter matches the given name.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException"/>.
            </summary>
            <param name="pattern">The route pattern as raw text.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException.Pattern">
            <summary>
            Gets the route pattern associated with this exception.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart">
            <summary>
            Represents a literal text part of a route pattern. Instances of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart"/>
            are immutable.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart.Content">
            <summary>
            Gets the text content.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind.Standard">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind"/> of a standard parameter
            without optional or catch all behavior.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind.Optional">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind"/> of an optional parameter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind.CatchAll">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind"/> of a catch-all parameter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart">
            <summary>
            Represents a parameter part in a route pattern. Instances of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart"/>
            are immutable.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.ParameterPolicies">
            <summary>
            Gets the list of parameter policies associated with this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.EncodeSlashes">
            <summary>
            Gets the value indicating if slashes in current parameter's value should be encoded.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.Default">
            <summary>
            Gets the default value of this route parameter. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.IsCatchAll">
            <summary>
            Returns <c>true</c> if this part is a catch-all parameter.
            Otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.IsOptional">
            <summary>
            Returns <c>true</c> if this part is an optional parameter.
            Otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.ParameterKind">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind"/> of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference">
            <summary>
            The parsed representation of a policy in a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePattern"/> parameter. Instances
            of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference"/> are immutable.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference.Content">
            <summary>
            Gets the constraint text.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference.ParameterPolicy">
            <summary>
            Gets a pre-existing <see cref="T:Microsoft.AspNetCore.Routing.IParameterPolicy"/> that was used to construct this reference.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart">
            <summary>
            Represents a part of a route pattern.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.PartKind">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind"/> of this part.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.IsLiteral">
            <summary>
            Returns <c>true</c> if this part is literal text. Otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.IsParameter">
            <summary>
            Returns <c>true</c> if this part is a route parameter. Otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.IsSeparator">
            <summary>
            Returns <c>true</c> if this part is an optional separator. Otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind">
            <summary>
            Defines the kinds of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind.Literal">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind"/> of a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind.Parameter">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind"/> of a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart"/>.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind.Separator">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind"/> of a <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment">
            <summary>
            Represents a path segment in a route pattern. Instances of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment"/> are
            immutable.
            </summary>
            <remarks>
            Route patterns are made up of URL path segments, delimited by <c>/</c>. A
            <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment"/> contains a group of
            <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart"/> that represent the structure of a segment
            in a route pattern.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment.IsSimple">
            <summary>
            Returns <c>true</c> if the segment contains a single part;
            otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment.Parts">
            <summary>
            Gets the list of parts in this segment.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart">
            <summary>
            Represents an optional separator part of a route pattern. Instances of <see cref="T:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart"/>
            are immutable.
            </summary>
            <remarks>
            <para>
            An optional separator is a literal text delimiter that appears between
            two parameter parts in the last segment of a route pattern. The only separator
            that is recognized is <c>.</c>.
            </para>
            <para>
            <example>
            In the route pattern <c>/{controller}/{action}/{id?}.{extension?}</c>
            the <c>.</c> character is an optional separator.
            </example>
            </para>
            <para>
            An optional separator character does not need to present in the URL path
            of a request for the route pattern to match.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart.Content">
            <summary>
            Gets the text content of the part.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)">
            <inheritdoc />
            <example>
            A typical constraint looks like the following
            "exampleConstraint(arg1, arg2, 12)".
            Here if the type registered for exampleConstraint has a single constructor with one argument,
            The entire string "arg1, arg2, 12" will be treated as a single argument.
            In all other cases arguments are split at comma.
            </example>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.#ctor(Microsoft.AspNetCore.Routing.IInlineConstraintResolver,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Routing.RouteConstraintBuilder"/> instance.
            </summary>
            <param name="inlineConstraintResolver">The <see cref="T:Microsoft.AspNetCore.Routing.IInlineConstraintResolver"/>.</param>
            <param name="displayName">The display name (for use in error messages).</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.Build">
            <summary>
            Builds a mapping of constraints.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> of the constraints.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.AddResolvedConstraint(System.String,System.String)">
            <summary>
            Adds a constraint for the given key, resolved by the <see cref="T:Microsoft.AspNetCore.Routing.IInlineConstraintResolver"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="constraintText">The text to be resolved by <see cref="T:Microsoft.AspNetCore.Routing.IInlineConstraintResolver"/>.</param>
            <remarks>
            The <see cref="T:Microsoft.AspNetCore.Routing.IInlineConstraintResolver"/> can create <see cref="T:Microsoft.AspNetCore.Routing.IRouteConstraint"/> instances
            based on <paramref name="constraintText"/>. See <see cref="P:Microsoft.AspNetCore.Routing.RouteOptions.ConstraintMap"/> to register
            custom constraint types.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.SetOptional(System.String)">
            <summary>
            Sets the given key as optional.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteOptions.ConstraintMap">
            <summary>
            Gets or sets a collection of constraints on the current route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteOptions.TrimmerSafeConstraintMap">
            <summary>
            <see cref="M:Microsoft.AspNetCore.Routing.RouteOptions.SetParameterPolicy``1(System.String)"/> ensures that types are added to the constraint map in a trimmer safe way.
            This API allows reading the map without encountering a trimmer warning within the framework.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteOptions.SetParameterPolicy``1(System.String)">
            <summary>
            Adds or overwrites the parameter policy with the associated route pattern token.
            </summary>
            <typeparam name="T">The parameter policy type.</typeparam>
            <param name="token">The route token used to apply the parameter policy.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteOptions.SetParameterPolicy(System.String,System.Type)">
            <summary>
            Adds or overwrites the parameter policy with the associated route pattern token.
            </summary>
            <param name="token">The route token used to apply the parameter policy.</param>
            <param name="type">The parameter policy type.</param>
            <exception cref="T:System.InvalidOperationException">Throws an exception if the type is not an <see cref="T:Microsoft.AspNetCore.Routing.IParameterPolicy"/>.</exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
            <summary>
            Resolves the inline constraint.
            </summary>
            <param name="inlineConstraint">The inline constraint to resolve.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Routing.IRouteConstraint"/> the inline constraint was resolved to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint.GetAlphaRouteRegex">
            <remarks>
            Pattern:<br/>
            <code>^[A-Za-z]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Za-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.BoolRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.IRouteConstraint})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint" /> class.
            </summary>
            <param name="constraints">The child constraints that must match for this constraint to match.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint.Constraints">
            <summary>
            Gets the child constraints that must match for this constraint to match.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.DateTimeRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.DecimalRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.DoubleRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.FileNameRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.FloatRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.GuidRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint" /> class that constrains
            a route parameter to be a string of a given length.
            </summary>
            <param name="length">The length of the route parameter.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint" /> class that constrains
            a route parameter to be a string of a given length.
            </summary>
            <param name="minLength">The minimum length allowed for the route parameter.</param>
            <param name="maxLength">The maximum length allowed for the route parameter.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.MinLength">
            <summary>
            Gets the minimum length allowed for the route parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.MaxLength">
            <summary>
            Gets the maximum length allowed for the route parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.LongRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint" /> class.
            </summary>
            <param name="maxLength">The maximum length allowed for the route parameter.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
            <summary>
            Gets the maximum length allowed for the route parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint" /> class.
            </summary>
            <param name="max">The maximum value allowed for the route parameter.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint.Max">
            <summary>
            Gets the maximum allowed value of the route parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint" /> class.
            </summary>
            <param name="minLength">The minimum length allowed for the route parameter.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint.MinLength">
            <summary>
            Gets the minimum length allowed for the route parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint" /> class.
            </summary>
            <param name="min">The minimum value allowed for the route parameter.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint.Min">
            <summary>
            Gets the minimum allowed value of the route parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.NonFileNameRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint.#ctor(Microsoft.AspNetCore.Routing.IRouteConstraint)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint"/> instance given the <paramref name="innerConstraint"/>.
            </summary>
            <param name="innerConstraint"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Routing.IRouteConstraint"/> associated with the optional parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint" /> class.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <remarks>The minimum value should be less than or equal to the maximum value.</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.Min">
            <summary>
            Gets the minimum allowed value of the route parameter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.Max">
            <summary>
            Gets the maximum allowed value of the route parameter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.RegexInlineRouteConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Routing.Constraints.RegexInlineRouteConstraint" /> class.
            </summary>
            <param name="regexPattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Constructor for a <see cref="T:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint"/> given a <paramref name="regex"/>.
            </summary>
            <param name="regex">A <see cref="T:System.Text.RegularExpressions.Regex"/> instance to use as a constraint.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
            <summary>
            Constructor for a <see cref="T:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint"/> given a <paramref name="regexPattern"/>.
            </summary>
            <param name="regexPattern">A string containing the regex pattern.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.Constraint">
            <summary>
            Gets the regular expression used in the route constraint.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.Match(System.String,Microsoft.AspNetCore.Components.Routing.RouteValueDictionary)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions">
            <summary>
            Extension methods for configuring cascading values on an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions.AddCascadingValue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds a cascading value to the <paramref name="serviceCollection"/>. This is equivalent to having
            a fixed <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> at the root of the component hierarchy.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="initialValueFactory">A callback that supplies a fixed value within each service provider scope.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions.AddCascadingValue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds a cascading value to the <paramref name="serviceCollection"/>. This is equivalent to having
            a fixed <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> at the root of the component hierarchy.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="name">A name for the cascading value. If set, <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute"/> can be configured to match based on this name.</param>
            <param name="initialValueFactory">A callback that supplies a fixed value within each service provider scope.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions.AddCascadingValue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Microsoft.AspNetCore.Components.CascadingValueSource{``0}})">
             <summary>
             Adds a cascading value to the <paramref name="serviceCollection"/>. This is equivalent to having
             a <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> at the root of the component hierarchy.
            
             With this overload, you can supply a <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/> which allows you
             to notify about updates to the value later, causing recipients to re-render. This overload should
             only be used if you plan to update the value dynamically.
             </summary>
             <typeparam name="TValue">The value type.</typeparam>
             <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
             <param name="sourceFactory">A callback that supplies a <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/> within each service provider scope.</param>
             <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions.TryAddCascadingValue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds a cascading value to the <paramref name="serviceCollection"/>, if none is already registered
            with the value type. This is equivalent to having a fixed <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> at
            the root of the component hierarchy.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="valueFactory">A callback that supplies a fixed value within each service provider scope.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions.TryAddCascadingValue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds a cascading value to the <paramref name="serviceCollection"/>, if none is already registered
            with the value type, regardless of the <paramref name="name"/>. This is equivalent to having a fixed
            <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> at the root of the component hierarchy.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="name">A name for the cascading value. If set, <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute"/> can be configured to match based on this name.</param>
            <param name="valueFactory">A callback that supplies a fixed value within each service provider scope.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions.TryAddCascadingValue``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Microsoft.AspNetCore.Components.CascadingValueSource{``0}})">
            <summary>
            Adds a cascading value to the <paramref name="serviceCollection"/>, if none is already registered
            with the value type. This is equivalent to having a fixed <see cref="T:Microsoft.AspNetCore.Components.CascadingValue`1"/> at
            the root of the component hierarchy.
            
            With this overload, you can supply a <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/> which allows you
            to notify about updates to the value later, causing recipients to re-render. This overload should
            only be used if you plan to update the value dynamically.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="sourceFactory">A callback that supplies a <see cref="T:Microsoft.AspNetCore.Components.CascadingValueSource`1"/> within each service provider scope.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GetAlphaRouteRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetAlphaRouteRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLetters">
            <summary>Supports searching for characters in or not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
