@using System.Text.RegularExpressions
@implements IDisposable

<PageTitle>@_PageTitle</PageTitle>

@if (this._CustomPage?.CustomPageRazorDescriptor != null)
{
    <div class="custom-page stack vertical">
        <ToolBar Visible="this._Commands.ToolbarVisible?.Flag == true">
            @if (this._Commands.ShowSidebar?.Flag == false)
            {
                <IconButton Icon="SvgIconType.Sidebar" Command="this._Commands.ShowSidebar" />
                <Separator />
            }

            @* -- Render Add-On's Toolbar Contents -- *@
            @foreach (var addon in this.AddonsStore.GetAddons(AddonType.CustomPage))
            {
                <text>@addon.ToolbarContents</text>
            }

            <Spacer />

            @if ((this._Commands.Fullscreen?.Flag ?? true) == true)
            {
                <IconButton Icon="SvgIconType.CircleClose" Command="this._Commands.Fullscreen" Title="Exit full screen [{0}]" />
            }
            else
            {
                <IconButton Icon="SvgIconType.FullScreen" Command="this._Commands.Fullscreen" />
            }
        </ToolBar>
        <div class="custom-page-main fill">
            <div class="custom-page-contents">
                <DynamicComponent Type="this._CustomPage.CustomPageRazorDescriptor.TypeOfCustomPageRazor" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    protected AddonsStore AddonsStore { get; init; } = default!;

    [CascadingParameter]
    protected CustomPageStore CustomPageStore { get; init; } = default!;

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    [CascadingParameter]
    protected BlazingStoryApp BlazingStoryApp { get; init; } = default!;

    [CascadingParameter]
    protected QueryRouteData RouteData { get; init; } = default!;

    private readonly Subscriptions _Subscriptions = new();

    private (Command? ToolbarVisible, Command? ShowSidebar, Command? Fullscreen) _Commands = default;

    private string _PageTitle = "";

    private CustomPageContainer? _CustomPage;

    protected override void OnParametersSet()
    {
        var navigationPath = Regex.Replace(this.RouteData.Parameter, "--custom$", "");
        if (!this.CustomPageStore.TryGetCustomPageContainerByPath(navigationPath, out var customPage)) return;
        this._PageTitle = string.Join(" / ", customPage.Title.Split('/')) + " - " + this.BlazingStoryApp.Title;
        this._CustomPage = customPage;
    }

    protected override void OnInitialized()
    {
        var commands = this.Services.GetRequiredService<CommandService>();
        this._Commands = (
            ToolbarVisible: commands[CommandType.ToolBarVisible],
            ShowSidebar: commands[CommandType.SideBarVisible],
            Fullscreen: commands[CommandType.GoFullScreen]);
        this._Subscriptions.Add(this._Commands.ToolbarVisible!.Subscribe(this.OnToggleToolbarVisible));
    }

    private async ValueTask OnToggleToolbarVisible()
    {
        this._Commands.ToolbarVisible?.ToggleFlag();
        await ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        this._Subscriptions.Dispose();
    }
}
